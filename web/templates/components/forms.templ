package components

import "fmt"

// Input field component
templ InputField(name, label, inputType, value, placeholder string, required bool, errors []string) {
	<div class="mb-4">
		<label for={ name } class="block text-sm font-medium text-gray-700 mb-2">
			{ label }
			if required {
				<span class="text-red-500">*</span>
			}
		</label>
		<input
			type={ inputType }
			id={ name }
			name={ name }
			value={ value }
			placeholder={ placeholder }
			if required {
				required
			}
			class={ "w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors",
				templ.KV("border-red-300 focus:ring-red-500", len(errors) > 0),
				templ.KV("border-gray-300", len(errors) == 0) }
		/>
		if len(errors) > 0 {
			<div class="mt-1">
				for _, err := range errors {
					<p class="text-sm text-red-600">{ err }</p>
				}
			</div>
		}
	</div>
}

// Textarea component
templ TextareaField(name, label, value, placeholder string, required bool, rows int, errors []string) {
	<div class="mb-4">
		<label for={ name } class="block text-sm font-medium text-gray-700 mb-2">
			{ label }
			if required {
				<span class="text-red-500">*</span>
			}
		</label>
		<textarea
			id={ name }
			name={ name }
			placeholder={ placeholder }
			if required {
				required
			}
			rows={ fmt.Sprintf("%d", rows) }
			class={ "w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors resize-vertical",
				templ.KV("border-red-300 focus:ring-red-500", len(errors) > 0),
				templ.KV("border-gray-300", len(errors) == 0) }
		>{ value }</textarea>
		if len(errors) > 0 {
			<div class="mt-1">
				for _, err := range errors {
					<p class="text-sm text-red-600">{ err }</p>
				}
			</div>
		}
	</div>
}

// Select dropdown component
templ SelectField(name, label string, options []SelectOption, selected string, required bool, errors []string) {
	<div class="mb-4">
		<label for={ name } class="block text-sm font-medium text-gray-700 mb-2">
			{ label }
			if required {
				<span class="text-red-500">*</span>
			}
		</label>
		<select
			id={ name }
			name={ name }
			if required {
				required
			}
			class={ "w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors",
				templ.KV("border-red-300 focus:ring-red-500", len(errors) > 0),
				templ.KV("border-gray-300", len(errors) == 0) }
		>
			<option value="">Select { label }</option>
			for _, option := range options {
				<option 
					value={ option.Value }
					if option.Value == selected {
						selected
					}
				>
					{ option.Label }
				</option>
			}
		</select>
		if len(errors) > 0 {
			<div class="mt-1">
				for _, err := range errors {
					<p class="text-sm text-red-600">{ err }</p>
				}
			</div>
		}
	</div>
}

// Button component
templ Button(text, buttonType, variant string, disabled bool, attrs templ.Attributes) {
	<button
		type={ buttonType }
		if disabled {
			disabled
		}
		{ attrs... }
		class={ "px-4 py-2 rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2",
			templ.KV("bg-primary-600 hover:bg-primary-700 text-white focus:ring-primary-500", variant == "primary"),
			templ.KV("bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500", variant == "secondary"),
			templ.KV("bg-red-600 hover:bg-red-700 text-white focus:ring-red-500", variant == "danger"),
			templ.KV("bg-white hover:bg-gray-50 text-gray-700 border border-gray-300 focus:ring-primary-500", variant == "outline"),
			templ.KV("opacity-50 cursor-not-allowed", disabled) }
	>
		{ text }
	</button>
}

// Alert component
templ Alert(message, alertType string) {
	<div class={ "p-4 rounded-lg mb-4",
		templ.KV("bg-green-50 border border-green-200 text-green-800", alertType == "success"),
		templ.KV("bg-red-50 border border-red-200 text-red-800", alertType == "error"),
		templ.KV("bg-yellow-50 border border-yellow-200 text-yellow-800", alertType == "warning"),
		templ.KV("bg-blue-50 border border-blue-200 text-blue-800", alertType == "info") }>
		<div class="flex">
			<div class="flex-shrink-0">
				if alertType == "success" {
					<svg class="h-5 w-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
				} else if alertType == "error" {
					<svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				} else if alertType == "warning" {
					<svg class="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
					</svg>
				} else {
					<svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
				}
			</div>
			<div class="ml-3">
				<p class="text-sm">{ message }</p>
			</div>
		</div>
	</div>
}

type SelectOption struct {
	Value string
	Label string
}