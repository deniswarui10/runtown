// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ImageUploadComponent provides a reusable drag-and-drop image upload interface
func ImageUploadComponent(eventID int, showOptions bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\"><h3 class=\"text-lg font-semibold text-gray-900 mb-4\">Upload Image</h3><!-- Drag and Drop Upload Area --><div id=\"upload-area\" class=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors cursor-pointer\" ondrop=\"handleDrop(event)\" ondragover=\"handleDragOver(event)\" ondragleave=\"handleDragLeave(event)\" onclick=\"document.getElementById('file-input').click()\"><svg class=\"mx-auto h-12 w-12 text-gray-400 mb-4\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 48 48\"><path d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg><p class=\"text-lg text-gray-600 mb-2\">Drag and drop your image here, or click to browse</p><p class=\"text-sm text-gray-500\">Supports JPEG, PNG, WebP up to 5MB</p><input type=\"file\" id=\"file-input\" accept=\"image/jpeg,image/png,image/webp\" class=\"hidden\" onchange=\"handleFileSelect(event)\"></div><!-- Upload Progress --><div id=\"upload-progress\" class=\"hidden mt-4\"><div class=\"bg-gray-200 rounded-full h-2\"><div id=\"progress-bar\" class=\"bg-primary-600 h-2 rounded-full transition-all duration-300\" style=\"width: 0%\"></div></div><p id=\"progress-text\" class=\"text-sm text-gray-600 mt-2\">Uploading...</p></div><!-- Image Processing Options -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if showOptions {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"mt-6 border-t pt-6\"><h4 class=\"text-md font-medium text-gray-900 mb-4\">Processing Options</h4><div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\"><div><label for=\"quality\" class=\"block text-sm font-medium text-gray-700 mb-1\">JPEG Quality</label> <select id=\"quality\" class=\"form-select w-full\"><option value=\"60\">60% (Smaller file)</option> <option value=\"75\">75% (Good quality)</option> <option value=\"85\" selected>85% (High quality)</option> <option value=\"95\">95% (Maximum quality)</option></select></div><div><label for=\"enable-webp\" class=\"block text-sm font-medium text-gray-700 mb-1\">WebP Support</label> <select id=\"enable-webp\" class=\"form-select w-full\"><option value=\"true\" selected>Enable WebP variants</option> <option value=\"false\">Disable WebP</option></select></div><div><label for=\"compression-level\" class=\"block text-sm font-medium text-gray-700 mb-1\">PNG Compression</label> <select id=\"compression-level\" class=\"form-select w-full\"><option value=\"3\">Low compression</option> <option value=\"6\" selected>Medium compression</option> <option value=\"9\">High compression</option></select></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Image Preview --><div id=\"image-preview\" class=\"hidden mt-6\"><h4 class=\"text-md font-medium text-gray-900 mb-4\">Preview & Crop</h4><div class=\"relative bg-gray-100 rounded-lg overflow-hidden\"><div id=\"crop-container\" class=\"relative\"><img id=\"preview-image\" src=\"\" alt=\"Preview\" class=\"max-w-full h-auto\"><div id=\"crop-overlay\" class=\"absolute inset-0 hidden\"><div class=\"absolute bg-black bg-opacity-50 inset-0\"></div><div id=\"crop-area\" class=\"absolute border-2 border-white cursor-move\" style=\"left: 10%; top: 10%; width: 80%; height: 80%;\"><div class=\"absolute w-2 h-2 bg-white border border-gray-400 -top-1 -left-1 cursor-nw-resize\" data-handle=\"nw\"></div><div class=\"absolute w-2 h-2 bg-white border border-gray-400 -top-1 -right-1 cursor-ne-resize\" data-handle=\"ne\"></div><div class=\"absolute w-2 h-2 bg-white border border-gray-400 -bottom-1 -left-1 cursor-sw-resize\" data-handle=\"sw\"></div><div class=\"absolute w-2 h-2 bg-white border border-gray-400 -bottom-1 -right-1 cursor-se-resize\" data-handle=\"se\"></div></div></div></div><button onclick=\"clearPreview()\" class=\"absolute top-2 right-2 bg-red-600 hover:bg-red-700 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm z-10\">×</button></div><!-- Crop Controls --><div class=\"mt-4 space-y-4\"><div class=\"flex items-center justify-between\"><div class=\"text-sm text-gray-600\"><span id=\"image-dimensions\"></span></div><div class=\"flex space-x-2\"><button id=\"enable-crop-btn\" onclick=\"toggleCrop()\" class=\"bg-gray-600 hover:bg-gray-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors\">Enable Crop</button> <button id=\"reset-crop-btn\" onclick=\"resetCrop()\" class=\"hidden bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-1 rounded text-sm font-medium transition-colors\">Reset</button></div></div><!-- Aspect Ratio Presets --><div id=\"aspect-ratio-controls\" class=\"hidden\"><label class=\"block text-sm font-medium text-gray-700 mb-2\">Aspect Ratio</label><div class=\"flex flex-wrap gap-2\"><button onclick=\"setAspectRatio(null)\" class=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-sm rounded transition-colors\">Free</button> <button onclick=\"setAspectRatio(1)\" class=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-sm rounded transition-colors\">1:1</button> <button onclick=\"setAspectRatio(4/3)\" class=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-sm rounded transition-colors\">4:3</button> <button onclick=\"setAspectRatio(16/9)\" class=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-sm rounded transition-colors\">16:9</button> <button onclick=\"setAspectRatio(3/2)\" class=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-sm rounded transition-colors\">3:2</button></div></div><div class=\"flex justify-end\"><button onclick=\"uploadPreviewedImage()\" class=\"bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg font-medium transition-colors\">Upload Image</button></div></div></div></div><script>\r\n\t\tlet previewFile = null;\r\n\t\tlet uploadInProgress = false;\r\n\t\tlet cropEnabled = false;\r\n\t\tlet cropData = null;\r\n\t\tlet aspectRatio = null;\r\n\t\tlet isDragging = false;\r\n\t\tlet dragStart = { x: 0, y: 0 };\r\n\t\tlet resizeHandle = null;\r\n\r\n\t\t// Drag and drop handlers\r\n\t\tfunction handleDragOver(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\tdocument.getElementById('upload-area').classList.add('border-primary-400', 'bg-primary-50');\r\n\t\t}\r\n\r\n\t\tfunction handleDragLeave(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\tdocument.getElementById('upload-area').classList.remove('border-primary-400', 'bg-primary-50');\r\n\t\t}\r\n\r\n\t\tfunction handleDrop(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t\tdocument.getElementById('upload-area').classList.remove('border-primary-400', 'bg-primary-50');\r\n\t\t\t\r\n\t\t\tconst files = e.dataTransfer.files;\r\n\t\t\tif (files.length > 0) {\r\n\t\t\t\tshowImagePreview(files[0]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction handleFileSelect(e) {\r\n\t\t\tconst files = e.target.files;\r\n\t\t\tif (files.length > 0) {\r\n\t\t\t\tshowImagePreview(files[0]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction showImagePreview(file) {\r\n\t\t\t// Validate file\r\n\t\t\tif (!file.type.startsWith('image/')) {\r\n\t\t\t\tshowErrorMessage('Please select an image file');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (file.size > 5 * 1024 * 1024) {\r\n\t\t\t\tshowErrorMessage('File size must be less than 5MB');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tpreviewFile = file;\r\n\r\n\t\t\t// Create preview\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.onload = function(e) {\r\n\t\t\t\tconst img = document.getElementById('preview-image');\r\n\t\t\t\timg.src = e.target.result;\r\n\t\t\t\t\r\n\t\t\t\t// Show dimensions\r\n\t\t\t\timg.onload = function() {\r\n\t\t\t\t\tdocument.getElementById('image-dimensions').textContent = \r\n\t\t\t\t\t\t`${img.naturalWidth} × ${img.naturalHeight} pixels`;\r\n\t\t\t\t\tinitializeCrop();\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdocument.getElementById('image-preview').classList.remove('hidden');\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(file);\r\n\t\t}\r\n\r\n\t\tfunction clearPreview() {\r\n\t\t\tdocument.getElementById('image-preview').classList.add('hidden');\r\n\t\t\tdocument.getElementById('file-input').value = '';\r\n\t\t\tpreviewFile = null;\r\n\t\t\tcropEnabled = false;\r\n\t\t\tcropData = null;\r\n\t\t\tdocument.getElementById('crop-overlay').classList.add('hidden');\r\n\t\t\tdocument.getElementById('enable-crop-btn').textContent = 'Enable Crop';\r\n\t\t\tdocument.getElementById('aspect-ratio-controls').classList.add('hidden');\r\n\t\t\tdocument.getElementById('reset-crop-btn').classList.add('hidden');\r\n\t\t}\r\n\r\n\t\tfunction initializeCrop() {\r\n\t\t\tconst cropArea = document.getElementById('crop-area');\r\n\t\t\tconst cropOverlay = document.getElementById('crop-overlay');\r\n\t\t\t\r\n\t\t\t// Add event listeners for crop area\r\n\t\t\tcropArea.addEventListener('mousedown', startDrag);\r\n\t\t\tdocument.addEventListener('mousemove', drag);\r\n\t\t\tdocument.addEventListener('mouseup', endDrag);\r\n\t\t\t\r\n\t\t\t// Add event listeners for resize handles\r\n\t\t\tconst handles = cropArea.querySelectorAll('[data-handle]');\r\n\t\t\thandles.forEach(handle => {\r\n\t\t\t\thandle.addEventListener('mousedown', startResize);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction toggleCrop() {\r\n\t\t\tcropEnabled = !cropEnabled;\r\n\t\t\tconst overlay = document.getElementById('crop-overlay');\r\n\t\t\tconst btn = document.getElementById('enable-crop-btn');\r\n\t\t\tconst aspectControls = document.getElementById('aspect-ratio-controls');\r\n\t\t\tconst resetBtn = document.getElementById('reset-crop-btn');\r\n\t\t\t\r\n\t\t\tif (cropEnabled) {\r\n\t\t\t\toverlay.classList.remove('hidden');\r\n\t\t\t\tbtn.textContent = 'Disable Crop';\r\n\t\t\t\taspectControls.classList.remove('hidden');\r\n\t\t\t\tresetBtn.classList.remove('hidden');\r\n\t\t\t} else {\r\n\t\t\t\toverlay.classList.add('hidden');\r\n\t\t\t\tbtn.textContent = 'Enable Crop';\r\n\t\t\t\taspectControls.classList.add('hidden');\r\n\t\t\t\tresetBtn.classList.add('hidden');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction resetCrop() {\r\n\t\t\tconst cropArea = document.getElementById('crop-area');\r\n\t\t\tcropArea.style.left = '10%';\r\n\t\t\tcropArea.style.top = '10%';\r\n\t\t\tcropArea.style.width = '80%';\r\n\t\t\tcropArea.style.height = '80%';\r\n\t\t\tcropData = null;\r\n\t\t}\r\n\r\n\t\tfunction setAspectRatio(ratio) {\r\n\t\t\taspectRatio = ratio;\r\n\t\t\tif (ratio && cropEnabled) {\r\n\t\t\t\t// Adjust crop area to match aspect ratio\r\n\t\t\t\tconst cropArea = document.getElementById('crop-area');\r\n\t\t\t\tconst container = document.getElementById('crop-container');\r\n\t\t\t\tconst containerRect = container.getBoundingClientRect();\r\n\t\t\t\t\r\n\t\t\t\tlet width = parseFloat(cropArea.style.width) / 100 * containerRect.width;\r\n\t\t\t\tlet height = width / ratio;\r\n\t\t\t\t\r\n\t\t\t\tif (height > containerRect.height * 0.8) {\r\n\t\t\t\t\theight = containerRect.height * 0.8;\r\n\t\t\t\t\twidth = height * ratio;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcropArea.style.width = (width / containerRect.width * 100) + '%';\r\n\t\t\t\tcropArea.style.height = (height / containerRect.height * 100) + '%';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction startDrag(e) {\r\n\t\t\tif (e.target.hasAttribute('data-handle')) return;\r\n\t\t\tisDragging = true;\r\n\t\t\tdragStart.x = e.clientX;\r\n\t\t\tdragStart.y = e.clientY;\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\r\n\t\tfunction startResize(e) {\r\n\t\t\tresizeHandle = e.target.getAttribute('data-handle');\r\n\t\t\tisDragging = true;\r\n\t\t\tdragStart.x = e.clientX;\r\n\t\t\tdragStart.y = e.clientY;\r\n\t\t\te.preventDefault();\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\r\n\t\tfunction drag(e) {\r\n\t\t\tif (!isDragging) return;\r\n\t\t\t\r\n\t\t\tconst cropArea = document.getElementById('crop-area');\r\n\t\t\tconst container = document.getElementById('crop-container');\r\n\t\t\tconst containerRect = container.getBoundingClientRect();\r\n\t\t\t\r\n\t\t\tconst deltaX = e.clientX - dragStart.x;\r\n\t\t\tconst deltaY = e.clientY - dragStart.y;\r\n\t\t\t\r\n\t\t\tif (resizeHandle) {\r\n\t\t\t\t// Handle resizing\r\n\t\t\t\tconst rect = cropArea.getBoundingClientRect();\r\n\t\t\t\tlet newWidth = rect.width;\r\n\t\t\t\tlet newHeight = rect.height;\r\n\t\t\t\tlet newLeft = rect.left - containerRect.left;\r\n\t\t\t\tlet newTop = rect.top - containerRect.top;\r\n\t\t\t\t\r\n\t\t\t\tswitch (resizeHandle) {\r\n\t\t\t\t\tcase 'se':\r\n\t\t\t\t\t\tnewWidth = Math.max(20, rect.width + deltaX);\r\n\t\t\t\t\t\tnewHeight = Math.max(20, rect.height + deltaY);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'sw':\r\n\t\t\t\t\t\tnewWidth = Math.max(20, rect.width - deltaX);\r\n\t\t\t\t\t\tnewHeight = Math.max(20, rect.height + deltaY);\r\n\t\t\t\t\t\tnewLeft = rect.left - containerRect.left + deltaX;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'ne':\r\n\t\t\t\t\t\tnewWidth = Math.max(20, rect.width + deltaX);\r\n\t\t\t\t\t\tnewHeight = Math.max(20, rect.height - deltaY);\r\n\t\t\t\t\t\tnewTop = rect.top - containerRect.top + deltaY;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'nw':\r\n\t\t\t\t\t\tnewWidth = Math.max(20, rect.width - deltaX);\r\n\t\t\t\t\t\tnewHeight = Math.max(20, rect.height - deltaY);\r\n\t\t\t\t\t\tnewLeft = rect.left - containerRect.left + deltaX;\r\n\t\t\t\t\t\tnewTop = rect.top - containerRect.top + deltaY;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Maintain aspect ratio if set\r\n\t\t\t\tif (aspectRatio) {\r\n\t\t\t\t\tif (resizeHandle === 'se' || resizeHandle === 'nw') {\r\n\t\t\t\t\t\tnewHeight = newWidth / aspectRatio;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewWidth = newHeight * aspectRatio;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Ensure crop area stays within bounds\r\n\t\t\t\tnewLeft = Math.max(0, Math.min(newLeft, containerRect.width - newWidth));\r\n\t\t\t\tnewTop = Math.max(0, Math.min(newTop, containerRect.height - newHeight));\r\n\t\t\t\tnewWidth = Math.min(newWidth, containerRect.width - newLeft);\r\n\t\t\t\tnewHeight = Math.min(newHeight, containerRect.height - newTop);\r\n\t\t\t\t\r\n\t\t\t\tcropArea.style.left = (newLeft / containerRect.width * 100) + '%';\r\n\t\t\t\tcropArea.style.top = (newTop / containerRect.height * 100) + '%';\r\n\t\t\t\tcropArea.style.width = (newWidth / containerRect.width * 100) + '%';\r\n\t\t\t\tcropArea.style.height = (newHeight / containerRect.height * 100) + '%';\r\n\t\t\t} else {\r\n\t\t\t\t// Handle moving\r\n\t\t\t\tconst rect = cropArea.getBoundingClientRect();\r\n\t\t\t\tlet newLeft = rect.left - containerRect.left + deltaX;\r\n\t\t\t\tlet newTop = rect.top - containerRect.top + deltaY;\r\n\t\t\t\t\r\n\t\t\t\t// Ensure crop area stays within bounds\r\n\t\t\t\tnewLeft = Math.max(0, Math.min(newLeft, containerRect.width - rect.width));\r\n\t\t\t\tnewTop = Math.max(0, Math.min(newTop, containerRect.height - rect.height));\r\n\t\t\t\t\r\n\t\t\t\tcropArea.style.left = (newLeft / containerRect.width * 100) + '%';\r\n\t\t\t\tcropArea.style.top = (newTop / containerRect.height * 100) + '%';\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdragStart.x = e.clientX;\r\n\t\t\tdragStart.y = e.clientY;\r\n\t\t}\r\n\r\n\t\tfunction endDrag() {\r\n\t\t\tisDragging = false;\r\n\t\t\tresizeHandle = null;\r\n\t\t}\r\n\r\n\t\tfunction getCropData() {\r\n\t\t\tif (!cropEnabled) return null;\r\n\t\t\t\r\n\t\t\tconst cropArea = document.getElementById('crop-area');\r\n\t\t\tconst container = document.getElementById('crop-container');\r\n\t\t\tconst img = document.getElementById('preview-image');\r\n\t\t\t\r\n\t\t\tconst containerRect = container.getBoundingClientRect();\r\n\t\t\tconst cropRect = cropArea.getBoundingClientRect();\r\n\t\t\t\r\n\t\t\t// Calculate crop coordinates relative to the original image\r\n\t\t\tconst scaleX = img.naturalWidth / img.offsetWidth;\r\n\t\t\tconst scaleY = img.naturalHeight / img.offsetHeight;\r\n\t\t\t\r\n\t\t\tconst x = (cropRect.left - containerRect.left) * scaleX;\r\n\t\t\tconst y = (cropRect.top - containerRect.top) * scaleY;\r\n\t\t\tconst width = cropRect.width * scaleX;\r\n\t\t\tconst height = cropRect.height * scaleY;\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tx: Math.round(x),\r\n\t\t\t\ty: Math.round(y),\r\n\t\t\t\twidth: Math.round(width),\r\n\t\t\t\theight: Math.round(height)\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tfunction uploadPreviewedImage() {\r\n\t\t\tif (!previewFile) {\r\n\t\t\t\tshowErrorMessage('No image selected');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (uploadInProgress) {\r\n\t\t\t\tshowErrorMessage('Upload already in progress');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tuploadInProgress = true;\r\n\t\t\tshowUploadProgress();\r\n\r\n\t\t\t// Get crop data if cropping is enabled\r\n\t\t\tconst cropInfo = getCropData();\r\n\r\n\t\t\t// Create form data\r\n\t\t\tconst formData = new FormData();\r\n\t\t\tformData.append('image', previewFile);\r\n\t\t\t\r\n\t\t\t// Add processing options if available\r\n\t\t\tconst qualitySelect = document.getElementById('quality');\r\n\t\t\tconst webpSelect = document.getElementById('enable-webp');\r\n\t\t\tconst compressionSelect = document.getElementById('compression-level');\r\n\t\t\t\r\n\t\t\tif (qualitySelect) formData.append('quality', qualitySelect.value);\r\n\t\t\tif (webpSelect) formData.append('enable_webp', webpSelect.value);\r\n\t\t\tif (compressionSelect) formData.append('compression_level', compressionSelect.value);\r\n\t\t\t\r\n\t\t\t// Add crop data if available\r\n\t\t\tif (cropInfo) {\r\n\t\t\t\tformData.append('crop_x', cropInfo.x.toString());\r\n\t\t\t\tformData.append('crop_y', cropInfo.y.toString());\r\n\t\t\t\tformData.append('crop_width', cropInfo.width.toString());\r\n\t\t\t\tformData.append('crop_height', cropInfo.height.toString());\r\n\t\t\t}\r\n\r\n\t\t\t// Upload image\r\n\t\t\tfetch(`/organizer/events/${ fmt.Sprintf(\"%d\", eventID) }/images/upload`, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: formData\r\n\t\t\t})\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\thideUploadProgress();\r\n\t\t\t\tuploadInProgress = false;\r\n\t\t\t\t\r\n\t\t\t\tif (data.success) {\r\n\t\t\t\t\tshowSuccessMessage('Image uploaded successfully');\r\n\t\t\t\t\tclearPreview();\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Trigger custom event for parent components\r\n\t\t\t\t\twindow.dispatchEvent(new CustomEvent('imageUploaded', {\r\n\t\t\t\t\t\tdetail: { imageUrl: data.image_url, result: data.result }\r\n\t\t\t\t\t}));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowErrorMessage(data.error || 'Upload failed');\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\thideUploadProgress();\r\n\t\t\t\tuploadInProgress = false;\r\n\t\t\t\tshowErrorMessage('Upload failed: ' + error.message);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction showUploadProgress() {\r\n\t\t\tdocument.getElementById('upload-progress').classList.remove('hidden');\r\n\t\t\t// Simulate progress for now\r\n\t\t\tlet progress = 0;\r\n\t\t\tconst interval = setInterval(() => {\r\n\t\t\t\tprogress += 10;\r\n\t\t\t\tdocument.getElementById('progress-bar').style.width = progress + '%';\r\n\t\t\t\tif (progress >= 90) {\r\n\t\t\t\t\tclearInterval(interval);\r\n\t\t\t\t}\r\n\t\t\t}, 200);\r\n\t\t}\r\n\r\n\t\tfunction hideUploadProgress() {\r\n\t\t\tdocument.getElementById('upload-progress').classList.add('hidden');\r\n\t\t\tdocument.getElementById('progress-bar').style.width = '0%';\r\n\t\t}\r\n\r\n\t\tfunction showSuccessMessage(message) {\r\n\t\t\tconst div = document.createElement('div');\r\n\t\t\tdiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';\r\n\t\t\tdiv.textContent = message;\r\n\t\t\tdocument.body.appendChild(div);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (document.body.contains(div)) {\r\n\t\t\t\t\tdocument.body.removeChild(div);\r\n\t\t\t\t}\r\n\t\t\t}, 3000);\r\n\t\t}\r\n\r\n\t\tfunction showErrorMessage(message) {\r\n\t\t\tconst div = document.createElement('div');\r\n\t\t\tdiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';\r\n\t\t\tdiv.textContent = message;\r\n\t\t\tdocument.body.appendChild(div);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (document.body.contains(div)) {\r\n\t\t\t\t\tdocument.body.removeChild(div);\r\n\t\t\t\t}\r\n\t\t\t}, 5000);\r\n\t\t}\r\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// ResponsiveImageDisplay shows an image with multiple variants for different screen sizes
func ResponsiveImageDisplay(imageURL string, variants map[string]string, alt string, cssClass string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(variants) > 0 {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<picture><!-- WebP variants for modern browsers -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if webpLarge, hasWebPLarge := variants["large-webp"]; hasWebPLarge {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<source media=\"(min-width: 1024px)\" srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(webpLarge)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 546, Col: 58}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" type=\"image/webp\"> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if webpMedium, hasWebPMedium := variants["medium-webp"]; hasWebPMedium {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<source media=\"(min-width: 768px)\" srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(webpMedium)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 549, Col: 58}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" type=\"image/webp\"> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if webpThumb, hasWebPThumb := variants["thumbnail-webp"]; hasWebPThumb {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<source srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(webpThumb)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 552, Col: 30}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" type=\"image/webp\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<!-- Fallback formats -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if large, hasLarge := variants["large"]; hasLarge {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<source media=\"(min-width: 1024px)\" srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(large)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 557, Col: 54}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if medium, hasMedium := variants["medium"]; hasMedium {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<source media=\"(min-width: 768px)\" srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(medium)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 560, Col: 54}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "\"> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if thumb, hasThumb := variants["thumbnail"]; hasThumb {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<source srcset=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var8 string
				templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(thumb)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 563, Col: 26}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<!-- Default fallback -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 = []any{cssClass}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var9...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<img src=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 string
			templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(imageURL)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 567, Col: 22}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\" alt=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(alt)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 567, Col: 34}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\" class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var9).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "\" loading=\"lazy\"></picture>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			var templ_7745c5c3_Var13 = []any{cssClass}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var13...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "<img src=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var14 string
			templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(imageURL)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 570, Col: 21}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\" alt=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(alt)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 570, Col: 33}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var16 string
			templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var13).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" loading=\"lazy\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

// ImageVariantSelector allows users to choose which image variant to use
func ImageVariantSelector(variants map[string]string, selectedVariant string, onChangeCallback string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var17 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var17 == nil {
			templ_7745c5c3_Var17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<div class=\"flex flex-wrap gap-2\"><label class=\"text-sm font-medium text-gray-700 mr-2\">Size:</label> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for variant, url := range variants {
			var templ_7745c5c3_Var18 = []any{"variant-selector px-3 py-1 text-xs rounded transition-colors",
				templ.KV("bg-primary-600 text-white", variant == selectedVariant),
				templ.KV("bg-gray-200 text-gray-700 hover:bg-gray-300", variant != selectedVariant)}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var18...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "<button type=\"button\" data-variant=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var19 string
			templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(variant)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 581, Col: 26}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "\" data-url=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var20 string
			templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(url)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 582, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "\" data-callback=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var21 string
			templ_7745c5c3_Var21, templ_7745c5c3_Err = templ.JoinStringErrs(onChangeCallback)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 583, Col: 36}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var21))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\" class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var22 string
			templ_7745c5c3_Var22, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var18).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var22))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var23 string
			templ_7745c5c3_Var23, templ_7745c5c3_Err = templ.JoinStringErrs(variant)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/templates/components/image_upload.templ`, Line: 588, Col: 13}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var23))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "</div><script>\r\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\r\n\t\t\tdocument.querySelectorAll('.variant-selector').forEach(button => {\r\n\t\t\t\tbutton.addEventListener('click', function() {\r\n\t\t\t\t\tconst variant = this.dataset.variant;\r\n\t\t\t\t\tconst url = this.dataset.url;\r\n\t\t\t\t\tconst callback = this.dataset.callback;\r\n\t\t\t\t\tif (window[callback]) {\r\n\t\t\t\t\t\twindow[callback](variant, url);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
