package pages

import (
	"fmt"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
)

// AdminUserManagement renders the user management interface
templ AdminUserManagement(user *models.User, users []*models.User, pagination map[string]interface{}, search, roleFilter string) {
	@layouts.BaseLayout("User Management - Admin - Event Ticketing Platform", user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">User Management</h1>
							<p class="mt-2 text-gray-600">Manage user accounts, roles, and permissions</p>
						</div>
						<a href="/admin" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
							<svg class="mr-2 -ml-1 w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"/>
							</svg>
							Back to Dashboard
						</a>
					</div>
				</div>

				<!-- Filters -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
					<form method="GET" class="flex flex-col sm:flex-row gap-4">
						<div class="flex-1">
							<label for="search" class="block text-sm font-medium text-gray-700 mb-1">Search Users</label>
							<input type="text" name="search" id="search" value={ search } placeholder="Search by name or email..." class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"/>
						</div>
						<div class="sm:w-48">
							<label for="role" class="block text-sm font-medium text-gray-700 mb-1">Filter by Role</label>
							<select name="role" id="role" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm">
								<option value="">All Roles</option>
								<option value="user" selected?={ roleFilter == "user" }>User</option>
								<option value="organizer" selected?={ roleFilter == "organizer" }>Organizer</option>
								<option value="admin" selected?={ roleFilter == "admin" }>Admin</option>
							</select>
						</div>
						<div class="sm:w-32 flex items-end">
							<button type="submit" class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
								Filter
							</button>
						</div>
					</form>
				</div>

				<!-- Users Table -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
					<div class="px-6 py-4 border-b border-gray-200">
						<h3 class="text-lg font-medium text-gray-900">
							Users ({ fmt.Sprintf("%d", pagination["TotalCount"]) } total)
						</h3>
					</div>
					
					if len(users) == 0 {
						<div class="p-6 text-center">
							<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
							</svg>
							<h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
							<p class="mt-1 text-sm text-gray-500">Try adjusting your search or filter criteria.</p>
						</div>
					} else {
						<div class="overflow-x-auto">
							<table class="min-w-full divide-y divide-gray-200">
								<thead class="bg-gray-50">
									<tr>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
										<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joined</th>
										<th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
									</tr>
								</thead>
								<tbody class="bg-white divide-y divide-gray-200">
									for _, u := range users {
										<tr>
											<td class="px-6 py-4 whitespace-nowrap">
												<div class="flex items-center">
													<div class="flex-shrink-0 h-10 w-10">
														<div class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
															<span class="text-sm font-medium text-gray-700">
																{ string(u.FirstName[0]) }{ string(u.LastName[0]) }
															</span>
														</div>
													</div>
													<div class="ml-4">
														<div class="text-sm font-medium text-gray-900">
															{ u.FirstName } { u.LastName }
														</div>
														<div class="text-sm text-gray-500">{ u.Email }</div>
													</div>
												</div>
											</td>
											<td class="px-6 py-4 whitespace-nowrap">
												<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full", 
													templ.KV("bg-blue-100 text-blue-800", u.Role == models.UserRoleUser),
													templ.KV("bg-purple-100 text-purple-800", u.Role == models.UserRoleOrganizer),
													templ.KV("bg-red-100 text-red-800", u.Role == models.UserRoleAdmin) }>
													{ string(u.Role) }
												</span>
											</td>
											<td class="px-6 py-4 whitespace-nowrap">
												if u.IsActive {
													<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
														Active
													</span>
												} else {
													<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
														Suspended
													</span>
												}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
												{ u.CreatedAt.Format("Jan 2, 2006") }
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
												<div class="flex items-center justify-end space-x-2">
													<!-- Role Update Form -->
													<form method="POST" action={ templ.URL(fmt.Sprintf("/admin/users/%d/role", u.ID)) } class="inline">
														<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
														<select name="role" onchange="this.form.submit()" class="text-sm border-gray-300 rounded-md focus:border-blue-500 focus:ring-blue-500">
															<option value="user" selected?={ u.Role == models.UserRoleUser }>User</option>
															<option value="organizer" selected?={ u.Role == models.UserRoleOrganizer }>Organizer</option>
															<option value="admin" selected?={ u.Role == models.UserRoleAdmin }>Admin</option>
														</select>
													</form>
													
													<!-- Suspend/Activate Button -->
													if u.IsActive {
														<form method="POST" action={ templ.URL(fmt.Sprintf("/admin/users/%d/suspend", u.ID)) } class="inline">
															<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
															<button type="submit" class="text-red-600 hover:text-red-900 text-sm" onclick="return confirm('Are you sure you want to suspend this user?')">
																Suspend
															</button>
														</form>
													} else {
														<form method="POST" action={ templ.URL(fmt.Sprintf("/admin/users/%d/activate", u.ID)) } class="inline">
															<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
															<button type="submit" class="text-green-600 hover:text-green-900 text-sm">
																Activate
															</button>
														</form>
													}
												</div>
											</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
				</div>

				<!-- Pagination -->
				if pagination["TotalPages"].(int) > 1 {
					<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-6 rounded-lg shadow-sm border border-gray-200">
						<div class="flex-1 flex justify-between sm:hidden">
							if pagination["HasPrev"].(bool) {
								<a href={ templ.URL(fmt.Sprintf("?page=%d&search=%s&role=%s", pagination["PrevPage"], search, roleFilter)) } class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
									Previous
								</a>
							}
							if pagination["HasNext"].(bool) {
								<a href={ templ.URL(fmt.Sprintf("?page=%d&search=%s&role=%s", pagination["NextPage"], search, roleFilter)) } class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
									Next
								</a>
							}
						</div>
						<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
							<div>
								<p class="text-sm text-gray-700">
									Showing page { fmt.Sprintf("%d", pagination["CurrentPage"]) } of { fmt.Sprintf("%d", pagination["TotalPages"]) }
								</p>
							</div>
							<div>
								<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
									if pagination["HasPrev"].(bool) {
										<a href={ templ.URL(fmt.Sprintf("?page=%d&search=%s&role=%s", pagination["PrevPage"], search, roleFilter)) } class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
											<span class="sr-only">Previous</span>
											<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"/>
											</svg>
										</a>
									}
									
									<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
										{ fmt.Sprintf("%d", pagination["CurrentPage"]) }
									</span>
									
									if pagination["HasNext"].(bool) {
										<a href={ templ.URL(fmt.Sprintf("?page=%d&search=%s&role=%s", pagination["NextPage"], search, roleFilter)) } class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
											<span class="sr-only">Next</span>
											<svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
												<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
											</svg>
										</a>
									}
								</nav>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}
}