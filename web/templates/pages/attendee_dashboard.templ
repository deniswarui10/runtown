package pages

import (
	"fmt"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/internal/types"
	"event-ticketing-platform/web/templates/layouts"
)

// AttendeeDashboard renders the attendee dashboard with their events and orders
templ AttendeeDashboard(user *models.User, data *types.AttendeeDashboardData) {
	@layouts.BaseLayout("My Dashboard", user) {
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<!-- Header -->
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-gray-900">My Dashboard</h1>
				<p class="mt-2 text-gray-600">Welcome back, { user.FirstName }! Here's your event activity.</p>
			</div>

			<!-- Stats Cards -->
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
				<!-- Total Orders -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
								<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
								</svg>
							</div>
						</div>
						<div class="ml-5 w-0 flex-1">
							<dl>
								<dt class="text-sm font-medium text-gray-500 truncate">Total Orders</dt>
								<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%d", data.TotalOrders) }</dd>
							</dl>
						</div>
					</div>
				</div>

				<!-- Total Spent -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
								<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
								</svg>
							</div>
						</div>
						<div class="ml-5 w-0 flex-1">
							<dl>
								<dt class="text-sm font-medium text-gray-500 truncate">Total Spent</dt>
								<dd class="text-lg font-medium text-gray-900">KSh { fmt.Sprintf("%.2f", data.TotalSpent) }</dd>
							</dl>
						</div>
					</div>
				</div>

				<!-- Total Tickets -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
								<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
								</svg>
							</div>
						</div>
						<div class="ml-5 w-0 flex-1">
							<dl>
								<dt class="text-sm font-medium text-gray-500 truncate">Tickets Purchased</dt>
								<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%d", data.TotalTickets) }</dd>
							</dl>
						</div>
					</div>
				</div>

				<!-- Upcoming Events -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<div class="flex items-center">
						<div class="flex-shrink-0">
							<div class="w-8 h-8 bg-orange-500 rounded-md flex items-center justify-center">
								<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
							</div>
						</div>
						<div class="ml-5 w-0 flex-1">
							<dl>
								<dt class="text-sm font-medium text-gray-500 truncate">Upcoming Events</dt>
								<dd class="text-lg font-medium text-gray-900">{ fmt.Sprintf("%d", len(data.UpcomingEvents)) }</dd>
							</dl>
						</div>
					</div>
				</div>
			</div>

			<!-- Main Content Grid -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Upcoming Events -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<div class="px-6 py-4 border-b border-gray-200">
						<h3 class="text-lg font-medium text-gray-900">Upcoming Events</h3>
					</div>
					<div class="p-6">
						if len(data.UpcomingEvents) > 0 {
							<div class="space-y-4">
								for _, event := range data.UpcomingEvents {
									<div class="flex items-center justify-between">
										<div>
											<h4 class="text-sm font-medium text-gray-900">{ event.Title }</h4>
											<p class="text-sm text-gray-500">{ event.StartDate.Format("Jan 2, 2006 at 3:04 PM") }</p>
											<p class="text-xs text-gray-400">{ event.Location }</p>
										</div>
										<div class="flex-shrink-0">
											<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } class="text-sm font-medium text-primary-600 hover:text-primary-500">
												View Details
											</a>
										</div>
									</div>
								}
							</div>
						} else {
							<p class="text-sm text-gray-500">No upcoming events found.</p>
						}
						<div class="mt-6">
							<a href="/events" class="text-sm font-medium text-primary-600 hover:text-primary-500">
								Browse events →
							</a>
						</div>
					</div>
				</div>

				<!-- Recent Orders -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<div class="px-6 py-4 border-b border-gray-200">
						<h3 class="text-lg font-medium text-gray-900">Recent Orders</h3>
					</div>
					<div class="p-6">
						if len(data.RecentOrders) > 0 {
							<div class="space-y-4">
								for _, order := range data.RecentOrders {
									<div class="flex items-center justify-between">
										<div>
											<h4 class="text-sm font-medium text-gray-900">{ order.Order.OrderNumber }</h4>
											<p class="text-sm text-gray-500">KSh { fmt.Sprintf("%.2f", float64(order.Order.TotalAmount)/100) }</p>
											<p class="text-xs text-gray-400">{ order.Order.CreatedAt.Format("Jan 2, 2006") }</p>
										</div>
										<div class="flex-shrink-0">
											switch order.Status {
												case models.OrderCompleted:
													<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
														Completed
													</span>
												case models.OrderPending:
													<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
														Pending
													</span>
												case models.OrderCancelled:
													<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
														Cancelled
													</span>
												default:
													<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
														{ string(order.Status) }
													</span>
											}
										</div>
									</div>
								}
							</div>
						} else {
							<p class="text-sm text-gray-500">No recent orders found.</p>
						}
						<div class="mt-6">
							<a href="/dashboard/orders" class="text-sm font-medium text-primary-600 hover:text-primary-500">
								View all orders →
							</a>
						</div>
					</div>
				</div>
			</div>

			<!-- Recommended Events -->
			if len(data.RecommendedEvents) > 0 {
				<div class="mt-8 bg-white rounded-lg shadow-sm border border-gray-200">
					<div class="px-6 py-4 border-b border-gray-200">
						<h3 class="text-lg font-medium text-gray-900">Recommended for You</h3>
					</div>
					<div class="p-6">
						<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
							for _, event := range data.RecommendedEvents {
								<div class="border border-gray-200 rounded-lg p-4">
									<h4 class="text-sm font-medium text-gray-900 mb-2">{ event.Title }</h4>
									<p class="text-sm text-gray-500 mb-2">{ event.StartDate.Format("Jan 2, 2006") }</p>
									<p class="text-xs text-gray-400 mb-3">{ event.Location }</p>
									<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } class="inline-flex items-center px-3 py-1 border border-transparent text-xs font-medium rounded text-primary-600 bg-primary-50 hover:bg-primary-100">
										View Event
									</a>
								</div>
							}
						</div>
					</div>
				</div>
			}

			<!-- Quick Actions -->
			<div class="mt-8 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
				<div class="flex flex-wrap gap-4">
					<a href="/events" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
						Browse Events
					</a>
					<a href="/dashboard/orders" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
						</svg>
						My Orders
					</a>
					<a href="/dashboard/profile" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
						</svg>
						Profile Settings
					</a>
				</div>
			</div>
		</div>
	}
}