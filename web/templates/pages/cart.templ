package pages

import (
	"fmt"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
)

templ CartPage(user *models.User, cart *models.Cart, errors map[string][]string, formData map[string]string) {
	@layouts.BaseLayout("Shopping Cart", user) {
		<div class="max-w-4xl mx-auto px-4 py-8">
			<div class="flex items-center justify-between mb-8">
				<h1 class="text-3xl font-bold text-gray-900">Shopping Cart</h1>
				if len(cart.Items) > 0 {
					<div class="text-sm text-gray-500">
						Expires in <span id="cart-timer" data-expires={ fmt.Sprintf("%d", cart.ExpiresAt) }></span>
					</div>
				}
			</div>
			
			if len(cart.Items) == 0 {
				<div class="text-center py-12">
					<div class="text-gray-400 mb-4">
						<svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5-6m0 0h15.5M17 13v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6"></path>
						</svg>
					</div>
					<h3 class="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
					<p class="text-gray-500 mb-6">Start browsing events to add tickets to your cart.</p>
					<a href="/events" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
						Browse Events
					</a>
				</div>
			} else {
				<div class="bg-white shadow overflow-hidden sm:rounded-md">
					<div class="px-4 py-5 sm:p-6">
						<div class="mb-4">
							<h2 class="text-lg font-medium text-gray-900">{ cart.EventTitle }</h2>
						</div>
						
						<div id="cart-items">
							@CartItemsPartial(cart)
						</div>
						
						<div class="mt-6 border-t border-gray-200 pt-6">
							<div class="flex justify-between text-base font-medium text-gray-900">
								<p>Total</p>
								<p>KSh { fmt.Sprintf("%.2f", float64(cart.TotalAmount)/100) }</p>
							</div>
							<p class="mt-0.5 text-sm text-gray-500">Shipping and taxes calculated at checkout.</p>
							<div class="mt-6 flex space-x-4">
								<a href="/checkout" class="flex-1 bg-blue-600 border border-transparent rounded-md shadow-sm py-3 px-4 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-center">
									Checkout
								</a>
								<button 
									hx-post="/cart/clear" 
									hx-confirm="Are you sure you want to clear your cart?"
									class="flex-1 bg-white border border-gray-300 rounded-md shadow-sm py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-center"
								>
									Clear Cart
								</button>
							</div>
							<div class="mt-6 flex justify-center text-sm text-center text-gray-500">
								<p>
									or 
									<a href="/events" class="text-blue-600 font-medium hover:text-blue-500">
										Continue Shopping<span aria-hidden="true"> &rarr;</span>
									</a>
								</p>
							</div>
						</div>
					</div>
				</div>
			}
		</div>
		
		<script>
			// Cart timer functionality
			function updateCartTimer() {
				const timerElement = document.getElementById('cart-timer');
				if (!timerElement) return;
				
				const expiresAt = parseInt(timerElement.dataset.expires);
				const now = Math.floor(Date.now() / 1000);
				const remaining = expiresAt - now;
				
				if (remaining <= 0) {
					location.reload();
					return;
				}
				
				const minutes = Math.floor(remaining / 60);
				const seconds = remaining % 60;
				timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
			}
			
			if (document.getElementById('cart-timer')) {
				updateCartTimer();
				setInterval(updateCartTimer, 1000);
			}
		</script>
	}
}

templ CartItemsPartial(cart *models.Cart) {
	<div class="space-y-4">
		for _, item := range cart.Items {
			<div class="flex items-center justify-between py-4 border-b border-gray-200">
				<div class="flex-1">
					<h3 class="text-sm font-medium text-gray-900">{ item.TicketName }</h3>
					<p class="text-sm text-gray-500">KSh { fmt.Sprintf("%.2f", float64(item.Price)/100) } each</p>
				</div>
				<div class="flex items-center space-x-4">
					<div class="flex items-center">
						<button 
							hx-post="/cart/update"
							hx-vals={ fmt.Sprintf(`{"ticket_type_id": %d, "quantity": %d}`, item.TicketTypeID, item.Quantity-1) }
							hx-target="#cart-items"
							hx-swap="innerHTML"
							class="text-gray-400 hover:text-gray-600"
							if item.Quantity <= 1 {
								disabled
							}
						>
							<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
							</svg>
						</button>
						<span class="mx-3 text-gray-900 font-medium">{ fmt.Sprintf("%d", item.Quantity) }</span>
						<button 
							hx-post="/cart/update"
							hx-vals={ fmt.Sprintf(`{"ticket_type_id": %d, "quantity": %d}`, item.TicketTypeID, item.Quantity+1) }
							hx-target="#cart-items"
							hx-swap="innerHTML"
							class="text-gray-400 hover:text-gray-600"
						>
							<svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
							</svg>
						</button>
					</div>
					<div class="text-right">
						<p class="text-sm font-medium text-gray-900">KSh { fmt.Sprintf("%.2f", float64(item.Subtotal)/100) }</p>
						<button 
							hx-post="/cart/update"
							hx-vals={ fmt.Sprintf(`{"ticket_type_id": %d, "quantity": 0}`, item.TicketTypeID) }
							hx-target="#cart-items"
							hx-swap="innerHTML"
							hx-confirm="Remove this item from cart?"
							class="text-sm text-red-600 hover:text-red-500"
						>
							Remove
						</button>
					</div>
				</div>
			</div>
		}
	</div>
}