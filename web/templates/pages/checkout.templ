package pages

import (
	"fmt"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
)

templ CheckoutPage(user *models.User, cart *models.Cart, errors map[string][]string, formData map[string]string) {
	@layouts.BaseLayout("Checkout", user) {
		<div class="max-w-4xl mx-auto px-4 py-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-8">Checkout</h1>
			
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Order Summary -->
				<div class="lg:order-2">
					<div class="bg-gray-50 rounded-lg p-6">
						<h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>
						
						<div class="mb-4">
							<h3 class="font-medium text-gray-900">{ cart.EventTitle }</h3>
						</div>
						
						<div class="space-y-3 mb-4">
							for _, item := range cart.Items {
								<div class="flex justify-between text-sm">
									<div>
										<p class="text-gray-900">{ item.TicketName }</p>
										<p class="text-gray-500">Qty: { fmt.Sprintf("%d", item.Quantity) } Ã— KSh { fmt.Sprintf("%.2f", float64(item.Price)/100) }</p>
									</div>
									<p class="text-gray-900">KSh { fmt.Sprintf("%.2f", float64(item.Subtotal)/100) }</p>
								</div>
							}
						</div>
						
						<div class="border-t border-gray-200 pt-4">
							<div class="flex justify-between text-base font-medium text-gray-900">
								<p>Total</p>
								<p>KSh { fmt.Sprintf("%.2f", float64(cart.TotalAmount)/100) }</p>
							</div>
						</div>
						
						<div class="mt-4 text-sm text-gray-500">
							<p>Expires in <span id="checkout-timer" data-expires={ fmt.Sprintf("%d", cart.ExpiresAt) }></span></p>
						</div>
					</div>
				</div>
				
				<!-- Checkout Form -->
				<div class="lg:order-1">
					<form hx-post="/checkout" hx-target="body" hx-swap="outerHTML">
						<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
						<!-- Billing Information -->
						<div class="mb-8">
							<h2 class="text-lg font-medium text-gray-900 mb-4">Billing Information</h2>
							
							<div class="grid grid-cols-1 gap-4">
								<div>
									<label for="billing_name" class="block text-sm font-medium text-gray-700">Full Name</label>
									<input 
										type="text" 
										id="billing_name" 
										name="billing_name" 
										value={ formData["billing_name"] }
										class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
										required
									/>
									if errors["billing_name"] != nil {
										<p class="mt-1 text-sm text-red-600">{ errors["billing_name"][0] }</p>
									}
								</div>
								
								<div>
									<label for="billing_email" class="block text-sm font-medium text-gray-700">Email Address</label>
									<input 
										type="email" 
										id="billing_email" 
										name="billing_email" 
										value={ formData["billing_email"] }
										class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
										required
									/>
									if errors["billing_email"] != nil {
										<p class="mt-1 text-sm text-red-600">{ errors["billing_email"][0] }</p>
									}
								</div>
							</div>
						</div>
						
						<!-- Payment Method -->
						<div class="mb-8">
							<h2 class="text-lg font-medium text-gray-900 mb-4">Payment Method</h2>
							
							<div class="space-y-4">
								<div class="flex items-center">
									<input 
										id="payment_paystack" 
										name="payment_method" 
										type="radio" 
										value="paystack"
										if formData["payment_method"] == "paystack" || formData["payment_method"] == "" {
											checked
										}
										class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
									/>
									<label for="payment_paystack" class="ml-3 block text-sm font-medium text-gray-700">
										<div class="flex items-center">
											<span>Paystack (Mobile Money, Cards)</span>
											<div class="ml-2 flex space-x-1">
												<span class="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded">M-Pesa</span>
												<span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">Cards</span>
												<span class="inline-block bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded">Bank</span>
											</div>
										</div>
									</label>
								</div>
								
								<div class="flex items-center">
									<input 
										id="payment_stripe" 
										name="payment_method" 
										type="radio" 
										value="stripe"
										if formData["payment_method"] == "stripe" {
											checked
										}
										class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
									/>
									<label for="payment_stripe" class="ml-3 block text-sm font-medium text-gray-700">
										<div class="flex items-center">
											<span>Credit/Debit Card (Stripe)</span>
											<div class="ml-2 flex space-x-1">
												<span class="inline-block bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">Visa</span>
												<span class="inline-block bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">Mastercard</span>
											</div>
										</div>
									</label>
								</div>
								
								<div class="flex items-center">
									<input 
										id="payment_paypal" 
										name="payment_method" 
										type="radio" 
										value="paypal"
										if formData["payment_method"] == "paypal" {
											checked
										}
										class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300"
									/>
									<label for="payment_paypal" class="ml-3 block text-sm font-medium text-gray-700">
										PayPal
									</label>
								</div>
							</div>
							
							if errors["payment_method"] != nil {
								<p class="mt-2 text-sm text-red-600">{ errors["payment_method"][0] }</p>
							}
						</div>
						
						<!-- General Errors -->
						if errors["general"] != nil {
							<div class="mb-4 bg-red-50 border border-red-200 rounded-md p-4">
								<div class="flex">
									<div class="flex-shrink-0">
										<svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
											<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
										</svg>
									</div>
									<div class="ml-3">
										<p class="text-sm text-red-800">{ errors["general"][0] }</p>
									</div>
								</div>
							</div>
						}
						
						<!-- Submit Button -->
						<div class="flex space-x-4">
							<button 
								type="submit" 
								class="flex-1 bg-blue-600 border border-transparent rounded-md shadow-sm py-3 px-4 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
							>
								Complete Purchase
							</button>
							<a 
								href="/cart" 
								class="flex-1 bg-white border border-gray-300 rounded-md shadow-sm py-3 px-4 text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 text-center"
							>
								Back to Cart
							</a>
						</div>
					</form>
				</div>
			</div>
		</div>
		
		<script>
			// Checkout timer functionality
			function updateCheckoutTimer() {
				const timerElement = document.getElementById('checkout-timer');
				if (!timerElement) return;
				
				const expiresAt = parseInt(timerElement.dataset.expires);
				const now = Math.floor(Date.now() / 1000);
				const remaining = expiresAt - now;
				
				if (remaining <= 0) {
					alert('Your cart has expired. You will be redirected to the cart page.');
					window.location.href = '/cart';
					return;
				}
				
				const minutes = Math.floor(remaining / 60);
				const seconds = remaining % 60;
				timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
			}
			
			if (document.getElementById('checkout-timer')) {
				updateCheckoutTimer();
				setInterval(updateCheckoutTimer, 1000);
			}
		</script>
	}
}