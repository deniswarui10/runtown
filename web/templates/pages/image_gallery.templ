package pages

import "event-ticketing-platform/internal/models"
import "event-ticketing-platform/web/templates/layouts"
import "fmt"
import "time"

// EventImage represents an image associated with an event
type EventImage struct {
	Key        string            `json:"key"`
	URL        string            `json:"url"`
	IsPrimary  bool              `json:"is_primary"`
	UploadedAt time.Time         `json:"uploaded_at"`
	Variants   map[string]string `json:"variants"`
}

templ ImageGalleryPage(user *models.User, event *models.Event, images []EventImage) {
	@layouts.BaseLayout(fmt.Sprintf("Manage Images - %s", event.Title), user) {
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<!-- Page Header -->
			<div class="mb-8">
				<div class="flex items-center justify-between">
					<div>
						<h1 class="text-3xl font-bold text-gray-900 mb-2">Manage Event Images</h1>
						<p class="text-lg text-gray-600">{ event.Title }</p>
					</div>
					<a 
						href={ templ.URL(fmt.Sprintf("/organizer/events/%d", event.ID)) }
						class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
					>
						Back to Event
					</a>
				</div>
			</div>

			<!-- Upload Section -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
				<h2 class="text-xl font-semibold text-gray-900 mb-4">Upload New Image</h2>
				
				<!-- Drag and Drop Upload Area -->
				<div 
					id="upload-area"
					class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary-400 transition-colors cursor-pointer"
					ondrop="handleDrop(event)"
					ondragover="handleDragOver(event)"
					ondragleave="handleDragLeave(event)"
					onclick="document.getElementById('file-input').click()"
				>
					<svg class="mx-auto h-12 w-12 text-gray-400 mb-4" stroke="currentColor" fill="none" viewBox="0 0 48 48">
						<path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
					<p class="text-lg text-gray-600 mb-2">Drag and drop your image here, or click to browse</p>
					<p class="text-sm text-gray-500">Supports JPEG, PNG, WebP up to 5MB</p>
					
					<input 
						type="file" 
						id="file-input" 
						accept="image/jpeg,image/png,image/webp" 
						class="hidden"
						onchange="handleFileSelect(event)"
					/>
				</div>

				<!-- Upload Progress -->
				<div id="upload-progress" class="hidden mt-4">
					<div class="bg-gray-200 rounded-full h-2">
						<div id="progress-bar" class="bg-primary-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
					</div>
					<p id="progress-text" class="text-sm text-gray-600 mt-2">Uploading...</p>
				</div>

				<!-- Image Processing Options -->
				<div class="mt-6 border-t pt-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">Processing Options</h3>
					<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
						<div>
							<label for="quality" class="block text-sm font-medium text-gray-700 mb-1">
								JPEG Quality
							</label>
							<select id="quality" class="form-select w-full">
								<option value="60">60% (Smaller file)</option>
								<option value="75">75% (Good quality)</option>
								<option value="85" selected>85% (High quality)</option>
								<option value="95">95% (Maximum quality)</option>
							</select>
						</div>
						<div>
							<label for="enable-webp" class="block text-sm font-medium text-gray-700 mb-1">
								WebP Support
							</label>
							<select id="enable-webp" class="form-select w-full">
								<option value="true" selected>Enable WebP variants</option>
								<option value="false">Disable WebP</option>
							</select>
						</div>
						<div>
							<label for="compression-level" class="block text-sm font-medium text-gray-700 mb-1">
								PNG Compression
							</label>
							<select id="compression-level" class="form-select w-full">
								<option value="3">Low compression</option>
								<option value="6" selected>Medium compression</option>
								<option value="9">High compression</option>
							</select>
						</div>
					</div>
				</div>
			</div>

			<!-- Image Gallery -->
			<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
				<div class="flex items-center justify-between mb-6">
					<h2 class="text-xl font-semibold text-gray-900">Event Images</h2>
					<span class="text-sm text-gray-500">{ fmt.Sprintf("%d image(s)", len(images)) }</span>
				</div>

				if len(images) > 0 {
					<div id="image-gallery" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						for _, image := range images {
							@ImageCard(image, event.ID)
						}
					</div>
				} else {
					<div class="text-center py-12">
						<svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
						</svg>
						<h3 class="text-lg font-medium text-gray-900 mb-2">No images uploaded</h3>
						<p class="text-gray-600">Upload your first image to get started.</p>
					</div>
				}
			</div>
		</div>

		<!-- Image Preview Modal -->
		<div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-50" onclick="closeImageModal()">
			<div class="flex items-center justify-center min-h-screen p-4">
				<div class="relative max-w-4xl max-h-full">
					<img id="modal-image" src="" alt="" class="max-w-full max-h-full object-contain"/>
					<button 
						onclick="closeImageModal()"
						class="absolute top-4 right-4 text-white hover:text-gray-300 text-2xl font-bold"
					>
						Ã—
					</button>
				</div>
			</div>
		</div>

		<!-- Confirmation Modal -->
		<div id="confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
			<div class="flex items-center justify-center min-h-screen p-4">
				<div class="bg-white rounded-lg p-6 max-w-md w-full">
					<h3 id="confirm-title" class="text-lg font-medium text-gray-900 mb-4"></h3>
					<p id="confirm-message" class="text-gray-600 mb-6"></p>
					<div class="flex justify-end space-x-3">
						<button 
							onclick="closeConfirmModal()"
							class="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium"
						>
							Cancel
						</button>
						<button 
							id="confirm-action"
							class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium"
						>
							Delete
						</button>
					</div>
				</div>
			</div>
		</div>

		<script>
			let currentEventId = { fmt.Sprintf("%d", event.ID) };
			let uploadInProgress = false;

			// Drag and drop handlers
			function handleDragOver(e) {
				e.preventDefault();
				e.stopPropagation();
				document.getElementById('upload-area').classList.add('border-primary-400', 'bg-primary-50');
			}

			function handleDragLeave(e) {
				e.preventDefault();
				e.stopPropagation();
				document.getElementById('upload-area').classList.remove('border-primary-400', 'bg-primary-50');
			}

			function handleDrop(e) {
				e.preventDefault();
				e.stopPropagation();
				document.getElementById('upload-area').classList.remove('border-primary-400', 'bg-primary-50');
				
				const files = e.dataTransfer.files;
				if (files.length > 0) {
					handleFileUpload(files[0]);
				}
			}

			function handleFileSelect(e) {
				const files = e.target.files;
				if (files.length > 0) {
					handleFileUpload(files[0]);
				}
			}

			function handleFileUpload(file) {
				if (uploadInProgress) {
					alert('Upload already in progress');
					return;
				}

				// Validate file
				if (!file.type.startsWith('image/')) {
					alert('Please select an image file');
					return;
				}

				if (file.size > 5 * 1024 * 1024) {
					alert('File size must be less than 5MB');
					return;
				}

				uploadInProgress = true;
				showUploadProgress();

				// Create form data
				const formData = new FormData();
				formData.append('image', file);
				formData.append('quality', document.getElementById('quality').value);
				formData.append('enable_webp', document.getElementById('enable-webp').value);
				formData.append('compression_level', document.getElementById('compression-level').value);

				// Upload image
				fetch(`/organizer/events/${currentEventId}/images/upload`, {
					method: 'POST',
					body: formData
				})
				.then(response => response.json())
				.then(data => {
					hideUploadProgress();
					uploadInProgress = false;
					
					if (data.success) {
						showSuccessMessage('Image uploaded successfully');
						// Reload the page to show the new image
						setTimeout(() => {
							window.location.reload();
						}, 1000);
					} else {
						showErrorMessage(data.error || 'Upload failed');
					}
				})
				.catch(error => {
					hideUploadProgress();
					uploadInProgress = false;
					showErrorMessage('Upload failed: ' + error.message);
				});
			}

			function showUploadProgress() {
				document.getElementById('upload-progress').classList.remove('hidden');
				// Simulate progress for now - in a real implementation you'd track actual progress
				let progress = 0;
				const interval = setInterval(() => {
					progress += 10;
					document.getElementById('progress-bar').style.width = progress + '%';
					if (progress >= 90) {
						clearInterval(interval);
					}
				}, 200);
			}

			function hideUploadProgress() {
				document.getElementById('upload-progress').classList.add('hidden');
				document.getElementById('progress-bar').style.width = '0%';
			}

			function deleteImage(imageKey) {
				showConfirmModal(
					'Delete Image',
					'Are you sure you want to delete this image? This action cannot be undone.',
					() => {
						fetch(`/organizer/events/${currentEventId}/images/delete`, {
							method: 'DELETE',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({ image_key: imageKey })
						})
						.then(response => response.json())
						.then(data => {
							if (data.success) {
								showSuccessMessage('Image deleted successfully');
								setTimeout(() => {
									window.location.reload();
								}, 1000);
							} else {
								showErrorMessage(data.error || 'Delete failed');
							}
						})
						.catch(error => {
							showErrorMessage('Delete failed: ' + error.message);
						});
					}
				);
			}

			function replaceImage(imageKey) {
				const input = document.createElement('input');
				input.type = 'file';
				input.accept = 'image/jpeg,image/png,image/webp';
				input.onchange = function(e) {
					const file = e.target.files[0];
					if (file) {
						const formData = new FormData();
						formData.append('image', file);
						formData.append('old_image_key', imageKey);
						formData.append('quality', document.getElementById('quality').value);
						formData.append('enable_webp', document.getElementById('enable-webp').value);
						formData.append('compression_level', document.getElementById('compression-level').value);

						showUploadProgress();

						fetch(`/organizer/events/${currentEventId}/images/replace`, {
							method: 'POST',
							body: formData
						})
						.then(response => response.json())
						.then(data => {
							hideUploadProgress();
							if (data.success) {
								showSuccessMessage('Image replaced successfully');
								setTimeout(() => {
									window.location.reload();
								}, 1000);
							} else {
								showErrorMessage(data.error || 'Replace failed');
							}
						})
						.catch(error => {
							hideUploadProgress();
							showErrorMessage('Replace failed: ' + error.message);
						});
					}
				};
				input.click();
			}

			function openImageModal(imageUrl) {
				document.getElementById('modal-image').src = imageUrl;
				document.getElementById('image-modal').classList.remove('hidden');
			}

			function closeImageModal() {
				document.getElementById('image-modal').classList.add('hidden');
			}

			function showConfirmModal(title, message, onConfirm) {
				document.getElementById('confirm-title').textContent = title;
				document.getElementById('confirm-message').textContent = message;
				document.getElementById('confirm-action').onclick = () => {
					closeConfirmModal();
					onConfirm();
				};
				document.getElementById('confirm-modal').classList.remove('hidden');
			}

			function closeConfirmModal() {
				document.getElementById('confirm-modal').classList.add('hidden');
			}

			function showSuccessMessage(message) {
				// Create a temporary success message
				const div = document.createElement('div');
				div.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
				div.textContent = message;
				document.body.appendChild(div);
				setTimeout(() => {
					document.body.removeChild(div);
				}, 3000);
			}

			function showErrorMessage(message) {
				// Create a temporary error message
				const div = document.createElement('div');
				div.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
				div.textContent = message;
				document.body.appendChild(div);
				setTimeout(() => {
					document.body.removeChild(div);
				}, 5000);
			}
		</script>
	}
}

templ ImageCard(image EventImage, eventID int) {
	<div class="bg-gray-50 rounded-lg overflow-hidden">
		<!-- Image Display -->
		<div class="relative aspect-video">
			<img 
				src={ image.URL } 
				alt="Event image" 
				class="w-full h-full object-cover cursor-pointer hover:opacity-90 transition-opacity"
				data-image-url={ image.URL }
				onclick="openImageModal(this.dataset.imageUrl)"
			/>
			if image.IsPrimary {
				<div class="absolute top-2 left-2">
					<span class="bg-primary-600 text-white px-2 py-1 text-xs font-medium rounded">
						Primary
					</span>
				</div>
			}
		</div>

		<!-- Image Info and Actions -->
		<div class="p-4">
			<div class="flex items-center justify-between mb-3">
				<div class="text-sm text-gray-600">
					<p>Uploaded { image.UploadedAt.Format("Jan 2, 2006") }</p>
					<p class="text-xs text-gray-500">{ fmt.Sprintf("%d variants", len(image.Variants)) }</p>
				</div>
			</div>

			<!-- Responsive Image Variants -->
			<div class="mb-4">
				<h4 class="text-sm font-medium text-gray-700 mb-2">Available Sizes</h4>
				<div class="flex flex-wrap gap-1">
					for variant, url := range image.Variants {
						<a 
							href={ templ.URL(url) } 
							target="_blank"
							class="px-2 py-1 bg-gray-200 hover:bg-gray-300 text-xs text-gray-700 rounded transition-colors"
						>
							{ variant }
						</a>
					}
				</div>
			</div>

			<!-- Actions -->
			<div class="flex space-x-2">
				<button 
					data-image-key={ image.Key }
					onclick="replaceImage(this.dataset.imageKey)"
					class="flex-1 bg-primary-600 hover:bg-primary-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors"
				>
					Replace
				</button>
				<button 
					data-image-key={ image.Key }
					onclick="deleteImage(this.dataset.imageKey)"
					class="flex-1 bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors"
				>
					Delete
				</button>
			</div>
		</div>
	</div>
}