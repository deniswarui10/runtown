package pages

import (
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
	"fmt"
	"time"
)

templ OrderDetailsEnhancedPage(user *models.User, order *models.Order, event *models.Event, tickets []*models.Ticket, ticketTypes map[int]*models.TicketType) {
	@layouts.BaseLayout("Order Details", user) {
		<div class="min-h-screen bg-gray-50">
			<div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Order Details</h1>
							<p class="text-gray-600 mt-2">Order #{ order.OrderNumber }</p>
						</div>
						<div class="flex space-x-3">
							<a href="/dashboard/orders" class="text-primary-600 hover:text-primary-500 font-medium">
								← Back to Orders
							</a>
							if order.Status == models.OrderCompleted {
								<div class="flex space-x-2">
									<a 
										href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d/tickets/download", order.ID)) }
										class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
									>
										Download All Tickets
									</a>
									<a 
										href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d/tickets/redownload", order.ID)) }
										class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
										title="Re-download tickets if you lost them"
									>
										Re-download
									</a>
								</div>
							}
						</div>
					</div>
				</div>

				<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
					<!-- Main Content -->
					<div class="lg:col-span-2 space-y-6">
						<!-- Event Information -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
							<h2 class="text-lg font-medium text-gray-900 mb-4">Event Information</h2>
							<div class="flex items-start space-x-4">
								if event.ImageURL != "" {
									<img src={ event.ImageURL } alt={ event.Title } class="w-24 h-24 rounded-lg object-cover"/>
								} else {
									<div class="w-24 h-24 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
										<svg class="h-12 w-12 text-white opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
										</svg>
									</div>
								}
								<div class="flex-1">
									<h3 class="text-xl font-semibold text-gray-900">{ event.Title }</h3>
									<div class="mt-3 space-y-2">
										<div class="flex items-center text-sm text-gray-600">
											<svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
											</svg>
											<span>{ event.StartDate.Format("Monday, January 2, 2006 at 3:04 PM") }</span>
										</div>
										<div class="flex items-center text-sm text-gray-600">
											<svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
											</svg>
											<span>{ event.Location }</span>
										</div>
										if event.Description != "" {
											<div class="mt-3">
												<p class="text-sm text-gray-600 line-clamp-3">{ event.Description }</p>
											</div>
										}
									</div>
								</div>
							</div>
							
							<!-- Event Status -->
							<div class="mt-4 pt-4 border-t border-gray-200">
								<div class="flex items-center justify-between">
									<div>
										if event.StartDate.After(time.Now()) {
											<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
												<svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
												</svg>
												Upcoming Event
											</span>
										} else {
											<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
												<svg class="h-4 w-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
												</svg>
												Past Event
											</span>
										}
									</div>
									<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } class="text-primary-600 hover:text-primary-500 text-sm font-medium">
										View Event Page →
									</a>
								</div>
							</div>
						</div>

						<!-- Tickets Section -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
							<div class="flex items-center justify-between mb-6">
								<h2 class="text-lg font-medium text-gray-900">Your Tickets</h2>
								if order.Status == models.OrderCompleted && len(tickets) > 1 {
									<a 
										href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d/tickets/download", order.ID)) }
										class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
									>
										Download All Tickets
									</a>
								}
							</div>
							
							if len(tickets) > 0 {
								<div class="space-y-4">
									for i, ticket := range tickets {
										@TicketCard(ticket, i+1, order, ticketTypes[ticket.TicketTypeID])
									}
								</div>
							} else {
								<div class="text-center py-8">
									<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
									</svg>
									<h3 class="mt-2 text-sm font-medium text-gray-900">No tickets found</h3>
									<p class="mt-1 text-sm text-gray-500">
										if order.Status == models.OrderPending {
											Tickets will be generated once payment is completed.
										} else {
											No tickets are associated with this order.
										}
									</p>
								</div>
							}
						</div>

						<!-- Order Actions -->
						if order.Status == models.OrderPending || order.CanBeCancelled() {
							<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
								<h2 class="text-lg font-medium text-gray-900 mb-4">Order Actions</h2>
								<div class="flex space-x-4">
									if order.CanBeCancelled() {
										<button 
											hx-post={ fmt.Sprintf("/dashboard/orders/%d/cancel", order.ID) }
											hx-confirm="Are you sure you want to cancel this order? This action cannot be undone."
											hx-target="body"
											class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
										>
											Cancel Order
										</button>
									}
									if order.Status == models.OrderPending {
										<a 
											href={ templ.URL(fmt.Sprintf("/checkout?order_id=%d", order.ID)) }
											class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
										>
											Complete Payment
										</a>
									}
								</div>
							</div>
						}
					</div>

					<!-- Sidebar -->
					<div class="lg:col-span-1 space-y-6">
						<!-- Order Summary -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
							<h2 class="text-lg font-medium text-gray-900 mb-4">Order Summary</h2>
							
							<div class="space-y-3">
								<div class="flex justify-between text-sm">
									<span class="text-gray-500">Order Number:</span>
									<span class="text-gray-900 font-medium">{ order.OrderNumber }</span>
								</div>
								<div class="flex justify-between text-sm">
									<span class="text-gray-500">Order Date:</span>
									<span class="text-gray-900">{ order.CreatedAt.Format("Jan 2, 2006 at 3:04 PM") }</span>
								</div>
								<div class="flex justify-between text-sm">
									<span class="text-gray-500">Status:</span>
									<span class={ "px-2 py-1 text-xs font-medium rounded-full",
										templ.KV("bg-green-100 text-green-800", order.Status == models.OrderCompleted),
										templ.KV("bg-yellow-100 text-yellow-800", order.Status == models.OrderPending),
										templ.KV("bg-red-100 text-red-800", order.Status == models.OrderCancelled || order.Status == models.OrderRefunded) }>
										{ order.GetStatusDisplayName() }
									</span>
								</div>
								<div class="flex justify-between text-sm">
									<span class="text-gray-500">Number of Tickets:</span>
									<span class="text-gray-900">{ fmt.Sprintf("%d", len(tickets)) }</span>
								</div>
								if order.PaymentID != "" {
									<div class="flex justify-between text-sm">
										<span class="text-gray-500">Payment ID:</span>
										<span class="text-gray-900 font-mono text-xs">{ order.PaymentID }</span>
									</div>
								}
								<div class="border-t border-gray-200 pt-3">
									<div class="flex justify-between">
										<span class="text-base font-medium text-gray-900">Total Amount:</span>
										<span class="text-base font-medium text-gray-900">KSh { fmt.Sprintf("%.2f", order.TotalAmountInCurrency()) }</span>
									</div>
								</div>
							</div>
						</div>

						<!-- Billing Information -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
							<h3 class="text-lg font-medium text-gray-900 mb-4">Billing Information</h3>
							<div class="space-y-3">
								<div>
									<label class="block text-sm font-medium text-gray-500">Name</label>
									<p class="mt-1 text-sm text-gray-900">{ order.BillingName }</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500">Email</label>
									<p class="mt-1 text-sm text-gray-900">{ order.BillingEmail }</p>
								</div>
							</div>
						</div>

						<!-- Help & Support -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
							<h3 class="text-lg font-medium text-gray-900 mb-4">Need Help?</h3>
							<div class="space-y-3">
								<a href="/support/contact" class="block text-sm text-primary-600 hover:text-primary-500">
									Contact Support
								</a>
								<a href="/support/faq" class="block text-sm text-primary-600 hover:text-primary-500">
									View FAQ
								</a>
								<a href="/support/refund-policy" class="block text-sm text-primary-600 hover:text-primary-500">
									Refund Policy
								</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ TicketCard(ticket *models.Ticket, ticketNumber int, order *models.Order, ticketType *models.TicketType) {
	<div class="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow">
		<div class="flex items-start justify-between">
			<div class="flex-1">
				<div class="flex items-center space-x-3">
					<div class="flex-shrink-0">
						<div class="w-10 h-10 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
							<span class="text-white font-semibold text-sm">{ fmt.Sprintf("%d", ticketNumber) }</span>
						</div>
					</div>
					<div>
						<h4 class="text-sm font-medium text-gray-900">
							if ticketType != nil {
								{ ticketType.Name }
							} else {
								Ticket #{ fmt.Sprintf("%d", ticketNumber) }
							}
						</h4>
						<p class="text-xs text-gray-500 mt-1">ID: { ticket.QRCode }</p>
						if ticketType != nil && ticketType.Description != "" {
							<p class="text-xs text-gray-600 mt-1">{ ticketType.Description }</p>
						}
					</div>
				</div>
				
				<!-- Ticket Status -->
				<div class="mt-3">
					<span class={ "inline-flex items-center px-2 py-1 text-xs font-medium rounded-full",
						templ.KV("bg-green-100 text-green-800", ticket.Status == models.TicketActive),
						templ.KV("bg-gray-100 text-gray-800", ticket.Status == models.TicketUsed),
						templ.KV("bg-red-100 text-red-800", ticket.Status == models.TicketRefunded) }>
						if ticket.Status == models.TicketActive {
							<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							Active
						} else if ticket.Status == models.TicketUsed {
							<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
							</svg>
							Used
						} else if ticket.Status == models.TicketRefunded {
							<svg class="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
							Refunded
						}
					</span>
				</div>
			</div>
			
			<!-- Ticket Actions -->
			<div class="flex flex-col space-y-2">
				if ticketType != nil {
					<span class="text-sm font-medium text-gray-900">KSh { fmt.Sprintf("%.2f", ticketType.PriceInCurrency()) }</span>
				}
				if order.Status == models.OrderCompleted && ticket.Status == models.TicketActive {
					<a 
						href={ templ.URL(fmt.Sprintf("/dashboard/tickets/%d/download", ticket.ID)) }
						class="text-xs text-primary-600 hover:text-primary-500 font-medium"
					>
						Download
					</a>
				}
			</div>
		</div>
		
		<!-- QR Code Preview (for completed orders) -->
		if order.Status == models.OrderCompleted && ticket.Status == models.TicketActive {
			<div class="mt-4 pt-4 border-t border-gray-200">
				<div class="flex items-center justify-between">
					<div class="text-xs text-gray-500">
						QR Code: { ticket.QRCode }
					</div>
					<button 
						class="text-xs text-gray-500 hover:text-gray-700 copy-qr-btn"
						data-qrcode={ ticket.QRCode }
						title="Copy QR Code"
					>
						<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
						</svg>
					</button>
				</div>
			</div>
		}
	</div>
}