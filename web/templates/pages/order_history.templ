package pages

import (
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/internal/repositories"
	"event-ticketing-platform/web/templates/layouts"
	"fmt"
	"time"
	"strconv"
)

// OrderHistoryFilters represents the filters for order history
type OrderHistoryFilters struct {
	Status    string
	DateFrom  string
	DateTo    string
	EventName string
	Page      int
	PerPage   int
}

templ OrderHistoryPage(user *models.User, orders []*repositories.OrderWithDetails, total int, filters OrderHistoryFilters, upcomingEvents []*models.Event) {
	@layouts.BaseLayout("Order History", user) {
		<div class="min-h-screen bg-gray-50">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Order History</h1>
							<p class="text-gray-600 mt-2">View and manage all your event ticket orders</p>
						</div>
						<a href="/events" class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
							Browse Events
						</a>
					</div>
				</div>

				<div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
					<!-- Sidebar with Filters and Upcoming Events -->
					<div class="lg:col-span-1">
						<!-- Search and Filters -->
						<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
							<h2 class="text-lg font-medium text-gray-900 mb-4">Filter Orders</h2>
							<form hx-get="/dashboard/orders" hx-target="#orders-content" hx-trigger="submit, change" class="space-y-4">
								<!-- Status Filter -->
								<div>
									<label for="status" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
									<select name="status" id="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
										<option value="">All Statuses</option>
										<option value="completed" selected?={ filters.Status == "completed" }>Completed</option>
										<option value="pending" selected?={ filters.Status == "pending" }>Pending</option>
										<option value="cancelled" selected?={ filters.Status == "cancelled" }>Cancelled</option>
										<option value="refunded" selected?={ filters.Status == "refunded" }>Refunded</option>
									</select>
								</div>

								<!-- Date Range Filter -->
								<div>
									<label for="date_from" class="block text-sm font-medium text-gray-700 mb-2">From Date</label>
									<input type="date" name="date_from" id="date_from" value={ filters.DateFrom } class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
								</div>

								<div>
									<label for="date_to" class="block text-sm font-medium text-gray-700 mb-2">To Date</label>
									<input type="date" name="date_to" id="date_to" value={ filters.DateTo } class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
								</div>

								<!-- Event Name Search -->
								<div>
									<label for="event_name" class="block text-sm font-medium text-gray-700 mb-2">Event Name</label>
									<input type="text" name="event_name" id="event_name" value={ filters.EventName } placeholder="Search by event name..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"/>
								</div>

								<!-- Results per page -->
								<div>
									<label for="per_page" class="block text-sm font-medium text-gray-700 mb-2">Results per page</label>
									<select name="per_page" id="per_page" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
										<option value="10" selected?={ filters.PerPage == 10 }>10</option>
										<option value="20" selected?={ filters.PerPage == 20 }>20</option>
										<option value="50" selected?={ filters.PerPage == 50 }>50</option>
									</select>
								</div>

								<button type="submit" class="w-full bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
									Apply Filters
								</button>
							</form>

							<!-- Clear Filters -->
							<div class="mt-4">
								<a href="/dashboard/orders" class="w-full block text-center text-gray-600 hover:text-gray-800 text-sm font-medium">
									Clear All Filters
								</a>
							</div>
						</div>

						<!-- Upcoming Events -->
						if len(upcomingEvents) > 0 {
							<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
								<h2 class="text-lg font-medium text-gray-900 mb-4">Upcoming Events</h2>
								<div class="space-y-3">
									for _, event := range upcomingEvents {
										@UpcomingEventCard(event)
									}
								</div>
								if len(upcomingEvents) > 3 {
									<div class="mt-4">
										<a href="/dashboard/upcoming-events" class="text-primary-600 hover:text-primary-500 text-sm font-medium">
											View all upcoming events â†’
										</a>
									</div>
								}
							</div>
						}
					</div>

					<!-- Main Content -->
					<div class="lg:col-span-3">
						<div id="orders-content">
							@OrderHistoryContent(orders, total, filters)
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ OrderHistoryContent(orders []*repositories.OrderWithDetails, total int, filters OrderHistoryFilters) {
	<!-- Results Summary -->
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
		<div class="flex items-center justify-between">
			<div>
				<p class="text-sm text-gray-600">
					Showing { fmt.Sprintf("%d", len(orders)) } of { fmt.Sprintf("%d", total) } orders
				</p>
			</div>
			<div class="flex items-center space-x-2">
				<span class="text-sm text-gray-500">Sort by:</span>
				<select name="sort" hx-get="/dashboard/orders" hx-target="#orders-content" hx-include="form" class="text-sm border border-gray-300 rounded px-2 py-1">
					<option value="created_at_desc">Newest First</option>
					<option value="created_at_asc">Oldest First</option>
					<option value="total_amount_desc">Highest Amount</option>
					<option value="total_amount_asc">Lowest Amount</option>
					<option value="event_date_desc">Event Date (Latest)</option>
					<option value="event_date_asc">Event Date (Earliest)</option>
				</select>
			</div>
		</div>
	</div>

	<!-- Orders List -->
	if len(orders) > 0 {
		<div class="space-y-6">
			for _, orderDetail := range orders {
				@OrderHistoryCard(orderDetail)
			}
		</div>

		<!-- Pagination -->
		if total > filters.PerPage {
			@OrderHistoryPagination(total, filters)
		}
	} else {
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
			<svg class="mx-auto h-16 w-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
			</svg>
			<h3 class="mt-4 text-lg font-medium text-gray-900">No orders found</h3>
			<p class="mt-2 text-gray-500">
				if filters.Status != "" || filters.DateFrom != "" || filters.DateTo != "" || filters.EventName != "" {
					No orders match your current filters. Try adjusting your search criteria.
				} else {
					You haven't purchased any tickets yet. Start by browsing events.
				}
			</p>
			<div class="mt-6">
				if filters.Status != "" || filters.DateFrom != "" || filters.DateTo != "" || filters.EventName != "" {
					<a href="/dashboard/orders" class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-medium transition-colors mr-4">
						Clear Filters
					</a>
				}
				<a href="/events" class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
					Browse Events
				</a>
			</div>
		</div>
	}
}

templ OrderHistoryCard(orderDetail *repositories.OrderWithDetails) {
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
		<div class="flex items-start justify-between mb-4">
			<div class="flex items-start space-x-4">
				<div class="flex-shrink-0">
					<div class="w-16 h-16 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
						<svg class="h-8 w-8 text-white opacity-75" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
						</svg>
					</div>
				</div>
				<div class="flex-1">
					<h4 class="text-lg font-medium text-gray-900">{ orderDetail.EventTitle }</h4>
					<p class="text-sm text-gray-500 mt-1">{ orderDetail.EventDate.Format("Monday, January 2, 2006 at 3:04 PM") }</p>
					<div class="flex items-center space-x-4 mt-2">
						<p class="text-sm text-gray-600">Order #{ orderDetail.Order.OrderNumber }</p>
						<p class="text-sm text-gray-600">{ fmt.Sprintf("%d", orderDetail.TicketCount) } ticket(s)</p>
						<p class="text-sm text-gray-600">{ orderDetail.Order.CreatedAt.Format("Jan 2, 2006") }</p>
					</div>
				</div>
			</div>
			<div class="text-right">
				<span class={ "px-3 py-1 text-sm font-medium rounded-full",
					templ.KV("bg-green-100 text-green-800", orderDetail.Order.Status == models.OrderCompleted),
					templ.KV("bg-yellow-100 text-yellow-800", orderDetail.Order.Status == models.OrderPending),
					templ.KV("bg-red-100 text-red-800", orderDetail.Order.Status == models.OrderCancelled || orderDetail.Order.Status == models.OrderRefunded) }>
					{ orderDetail.Order.GetStatusDisplayName() }
				</span>
				<p class="text-lg font-semibold text-gray-900 mt-2">KSh { fmt.Sprintf("%.2f", orderDetail.Order.TotalAmountInCurrency()) }</p>
			</div>
		</div>
		
		<div class="pt-4 border-t border-gray-200">
			<div class="flex items-center justify-between">
				<div class="flex space-x-3">
					<a 
						href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d", orderDetail.Order.ID)) }
						class="text-primary-600 hover:text-primary-500 text-sm font-medium"
					>
						View Details
					</a>
					if orderDetail.Order.Status == models.OrderCompleted {
						<a 
							href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d/tickets/download", orderDetail.Order.ID)) }
							class="text-green-600 hover:text-green-500 text-sm font-medium"
						>
							Download Tickets
						</a>
						<a 
							href={ templ.URL(fmt.Sprintf("/dashboard/orders/%d/tickets/redownload", orderDetail.Order.ID)) }
							class="text-blue-600 hover:text-blue-500 text-sm font-medium"
							title="Re-download if you lost your tickets"
						>
							Re-download
						</a>
					}
					if orderDetail.Order.CanBeCancelled() {
						<button 
							hx-post={ fmt.Sprintf("/dashboard/orders/%d/cancel", orderDetail.Order.ID) }
							hx-confirm="Are you sure you want to cancel this order?"
							hx-target="#orders-content"
							class="text-red-600 hover:text-red-500 text-sm font-medium"
						>
							Cancel Order
						</button>
					}
				</div>
				<div class="text-right">
					if orderDetail.EventDate.After(time.Now()) {
						<span class="text-sm text-green-600 font-medium">Upcoming Event</span>
					} else {
						<span class="text-sm text-gray-500">Past Event</span>
					}
				</div>
			</div>
		</div>
	</div>
}

templ OrderHistoryPagination(total int, filters OrderHistoryFilters) {
	<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mt-6">
		<div class="flex items-center justify-between">
			<div class="text-sm text-gray-600">
				{ fmt.Sprintf("Page %d of %d", filters.Page, (total+filters.PerPage-1)/filters.PerPage) }
			</div>
			<div class="flex space-x-2">
				if filters.Page > 1 {
					<a 
						href={ templ.URL(fmt.Sprintf("/dashboard/orders?page=%d&per_page=%d&status=%s&date_from=%s&date_to=%s&event_name=%s", 
							filters.Page-1, filters.PerPage, filters.Status, filters.DateFrom, filters.DateTo, filters.EventName)) }
						class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
					>
						Previous
					</a>
				}
				
				<!-- Page numbers -->
				for page := maxInt(1, filters.Page-2); page <= minIntOrderHistory((total+filters.PerPage-1)/filters.PerPage, filters.Page+2); page++ {
					if page == filters.Page {
						<span class="px-3 py-2 text-sm font-medium text-white bg-primary-600 border border-primary-600 rounded-lg">
							{ strconv.Itoa(page) }
						</span>
					} else {
						<a 
							href={ templ.URL(fmt.Sprintf("/dashboard/orders?page=%d&per_page=%d&status=%s&date_from=%s&date_to=%s&event_name=%s", 
								page, filters.PerPage, filters.Status, filters.DateFrom, filters.DateTo, filters.EventName)) }
							class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
						>
							{ strconv.Itoa(page) }
						</a>
					}
				}
				
				if filters.Page < (total+filters.PerPage-1)/filters.PerPage {
					<a 
						href={ templ.URL(fmt.Sprintf("/dashboard/orders?page=%d&per_page=%d&status=%s&date_from=%s&date_to=%s&event_name=%s", 
							filters.Page+1, filters.PerPage, filters.Status, filters.DateFrom, filters.DateTo, filters.EventName)) }
						class="px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
					>
						Next
					</a>
				}
			</div>
		</div>
	</div>
}

templ UpcomingEventCard(event *models.Event) {
	<div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-colors">
		<div class="flex items-start space-x-3">
			<div class="flex-shrink-0">
				<div class="w-10 h-10 bg-gradient-to-br from-primary-400 to-primary-600 rounded-lg flex items-center justify-center">
					<svg class="h-5 w-5 text-white opacity-75" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
					</svg>
				</div>
			</div>
			<div class="flex-1 min-w-0">
				<h4 class="text-sm font-medium text-gray-900 truncate">
					<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } class="hover:text-primary-600">
						{ event.Title }
					</a>
				</h4>
				<p class="text-xs text-gray-500 mt-1">{ event.StartDate.Format("Jan 2, 2006") }</p>
				<p class="text-xs text-gray-500">{ event.Location }</p>
			</div>
		</div>
	</div>
}

// Helper functions for template
func maxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func minIntOrderHistory(a, b int) int {
	if a < b {
		return a
	}
	return b
}