package pages

import (
	"fmt"
	"strconv"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
)

// OrganizerEventsPage renders the organizer's events management page
templ OrganizerEventsPage(user *models.User, events []*models.Event, categories []*models.Category, statusFilter, searchFilter string) {
	@layouts.BaseLayout("My Events - Event Ticketing Platform", user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex justify-between items-center">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">My Events</h1>
							<p class="mt-2 text-gray-600">Manage your events and track their performance</p>
						</div>
						<a href="/organizer/events/create" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
							Create New Event
						</a>
					</div>
				</div>

				<!-- Filters -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
					<div class="flex flex-wrap gap-4">
						<!-- Search -->
						<div class="flex-1 min-w-64">
							<label for="search" class="block text-sm font-medium text-gray-700 mb-2">Search Events</label>
							<input 
								type="text" 
								id="search" 
								name="search" 
								value={ searchFilter }
								placeholder="Search by title or description..."
								class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
								hx-get="/organizer/events"
								hx-trigger="keyup changed delay:300ms"
								hx-target="#events-list"
								hx-include="[name='status']"
							/>
						</div>

						<!-- Status Filter -->
						<div class="min-w-48">
							<label for="status" class="block text-sm font-medium text-gray-700 mb-2">Status</label>
							<select 
								id="status" 
								name="status" 
								class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
								hx-get="/organizer/events"
								hx-trigger="change"
								hx-target="#events-list"
								hx-include="[name='search']"
							>
								<option value="">All Statuses</option>
								<option value="draft" if statusFilter == "draft" { selected }>Draft</option>
								<option value="published" if statusFilter == "published" { selected }>Published</option>
								<option value="cancelled" if statusFilter == "cancelled" { selected }>Cancelled</option>
							</select>
						</div>
					</div>
				</div>

				<!-- Events List -->
				<div id="events-list">
					@OrganizerEventsListPartial(events)
				</div>
			</div>
		</div>
	}
}

// OrganizerEventsListPartial renders just the events list for HTMX updates
templ OrganizerEventsListPartial(events []*models.Event) {
	if len(events) == 0 {
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
			<div class="text-gray-400 mb-4">
				<svg class="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 0V6a2 2 0 012-2h4a2 2 0 012 2v1m-6 0h8m-8 0H6a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2h-2"/>
				</svg>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-2">No events found</h3>
			<p class="text-gray-600 mb-6">Get started by creating your first event.</p>
			<a href="/organizer/events/create" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
				Create Your First Event
			</a>
		</div>
	} else {
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Event</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, event := range events {
							<tr class="hover:bg-gray-50" id={ fmt.Sprintf("event-row-%d", event.ID) }>
								<td class="px-6 py-4">
									<div class="flex items-center">
										if event.ImageURL != "" {
											<img class="h-12 w-12 rounded-lg object-cover mr-4" src={ event.ImageURL } alt={ event.Title }/>
										} else {
											<div class="h-12 w-12 rounded-lg bg-gray-200 flex items-center justify-center mr-4">
												<svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
												</svg>
											</div>
										}
										<div>
											<div class="text-sm font-medium text-gray-900">{ event.Title }</div>
											<div class="text-sm text-gray-500">{ event.Location }</div>
										</div>
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm text-gray-900">{ event.StartDate.Format("Jan 2, 2006") }</div>
									<div class="text-sm text-gray-500">{ event.StartDate.Format("3:04 PM") }</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									@EventStatusBadge(event.Status)
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
									<div class="flex items-center space-x-2">
										<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/edit", event.ID)) } class="text-blue-600 hover:text-blue-900">Edit</a>
										<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } class="text-green-600 hover:text-green-900" target="_blank">View</a>
										if event.Status == models.StatusDraft {
											<button 
												class="text-red-600 hover:text-red-900"
												hx-delete={ fmt.Sprintf("/organizer/events/%d", event.ID) }
												hx-target={ fmt.Sprintf("#event-row-%d", event.ID) }
												hx-swap="outerHTML"
												hx-confirm="Are you sure you want to delete this event? This action cannot be undone."
											>
												Delete
											</button>
										}
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

// EventStatusBadge renders a status badge for an event
templ EventStatusBadge(status models.EventStatus) {
	switch status {
		case models.StatusDraft:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
				Draft
			</span>
		case models.StatusPublished:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
				Published
			</span>
		case models.StatusCancelled:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
				Cancelled
			</span>
		default:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
				{ string(status) }
			</span>
	}
}

// CreateEventPage renders the event creation form
templ CreateEventPage(user *models.User, categories []*models.Category, formData map[string]interface{}, errors map[string]string) {
	@layouts.BaseLayout("Create Event - Event Ticketing Platform", user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center">
						<a href="/organizer/events" class="text-gray-400 hover:text-gray-600 mr-4">
							<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>
						</a>
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Create New Event</h1>
							<p class="mt-2 text-gray-600">Fill in the details to create your event</p>
						</div>
					</div>
				</div>

				<!-- Form -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<form method="POST" action="/organizer/events" enctype="multipart/form-data" class="p-6 space-y-6">
						<!-- CSRF Token -->
						<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
						
						<!-- General Error -->
						if errors != nil && errors["general"] != "" {
							<div class="bg-red-50 border border-red-200 rounded-lg p-4">
								<div class="flex">
									<svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
									</svg>
									<div class="ml-3">
										<p class="text-sm text-red-800">{ errors["general"] }</p>
									</div>
								</div>
							</div>
						}

						@EventForm(categories, formData, errors, false)

						<!-- Submit Buttons -->
						<div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
							<a href="/organizer/events" class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Cancel
							</a>
							<button type="submit" name="status" value="draft" class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Save as Draft
							</button>
							<button type="submit" name="status" value="published" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
								Create & Publish
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

// EditEventPage renders the event editing form
templ EditEventPage(user *models.User, event *models.Event, categories []*models.Category, formData map[string]interface{}, errors map[string]string) {
	@layouts.BaseLayout(fmt.Sprintf("Edit %s - Event Ticketing Platform", event.Title), user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<a href="/organizer/events" class="text-gray-400 hover:text-gray-600 mr-4">
								<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
								</svg>
							</a>
							<div>
								<h1 class="text-3xl font-bold text-gray-900">Edit Event</h1>
								<p class="mt-2 text-gray-600">Update your event details</p>
							</div>
						</div>
						<div class="flex items-center space-x-4">
							@EventStatusBadge(event.Status)
							<a href={ templ.URL(fmt.Sprintf("/events/%d", event.ID)) } target="_blank" class="text-blue-600 hover:text-blue-800 font-medium">
								View Public Page
							</a>
						</div>
					</div>
				</div>

				<!-- Success Message will be handled by the handler -->

				<!-- Form -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<form method="POST" enctype="multipart/form-data" class="p-6 space-y-6">
						<!-- CSRF Token -->
						<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
						
						<!-- General Error -->
						if errors != nil && errors["general"] != "" {
							<div class="bg-red-50 border border-red-200 rounded-lg p-4">
								<div class="flex">
									<svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
									</svg>
									<div class="ml-3">
										<p class="text-sm text-red-800">{ errors["general"] }</p>
									</div>
								</div>
							</div>
						}

						@EventForm(categories, getFormDataFromEvent(event, formData), errors, true)

						<!-- Submit Buttons -->
						<div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
							<a href="/organizer/events" class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Cancel
							</a>
							if event.Status == models.StatusDraft {
								<button type="submit" name="status" value="draft" class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
									Save as Draft
								</button>
								<button type="submit" name="status" value="published" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
									Save & Publish
								</button>
							} else {
								<button type="submit" name="status" value={ string(event.Status) } class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
									Save Changes
								</button>
							}
						</div>
					</form>
				</div>

				<!-- Additional Actions -->
				<div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">Additional Actions</h3>
					<div class="flex flex-wrap gap-4">
						<!-- Duplicate Event -->
						<button 
							class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors"
							onclick="showDuplicateModal()"
						>
							Duplicate Event
						</button>

						<!-- Manage Images -->
						<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/images", event.ID)) } class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
							Manage Images
						</a>

						<!-- Publish/Unpublish Event -->
						if event.Status == models.StatusDraft {
							<form method="POST" action={ templ.URL(fmt.Sprintf("/organizer/events/%d/publish", event.ID)) } class="inline">
								<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
								<button type="submit" class="px-4 py-2 border border-green-300 rounded-lg text-green-700 hover:bg-green-50 font-medium transition-colors">
									Publish Event
								</button>
							</form>
						} else if event.Status == models.StatusPublished {
							<form method="POST" action={ templ.URL(fmt.Sprintf("/organizer/events/%d/unpublish", event.ID)) } class="inline">
								<input type="hidden" name="csrf_token" value={ getCSRFToken(ctx) }/>
								<button type="submit" class="px-4 py-2 border border-yellow-300 rounded-lg text-yellow-700 hover:bg-yellow-50 font-medium transition-colors">
									Unpublish Event
								</button>
							</form>
						}

						<!-- Delete Event (only for drafts) -->
						if event.Status == models.StatusDraft {
							<button 
								class="px-4 py-2 border border-red-300 rounded-lg text-red-700 hover:bg-red-50 font-medium transition-colors"
								hx-delete={ fmt.Sprintf("/organizer/events/%d", event.ID) }
								hx-confirm="Are you sure you want to delete this event? This action cannot be undone."
								onclick="if(confirm('Are you sure you want to delete this event? This action cannot be undone.')) { window.location.href='/organizer/events'; }"
							>
								Delete Event
							</button>
						}
					</div>
				</div>
			</div>
		</div>

		<!-- Duplicate Event Modal -->
		<div id="duplicateModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
			<div class="flex items-center justify-center min-h-screen p-4">
				<div class="bg-white rounded-lg shadow-xl max-w-md w-full">
					<form method="POST" action={ templ.URL(fmt.Sprintf("/organizer/events/%d/duplicate", event.ID)) }>
						<div class="p-6">
							<h3 class="text-lg font-medium text-gray-900 mb-4">Duplicate Event</h3>
							<div class="space-y-4">
								<div>
									<label for="duplicate_title" class="block text-sm font-medium text-gray-700 mb-2">New Event Title</label>
									<input type="text" id="duplicate_title" name="title" value={ event.Title + " (Copy)" } required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
								</div>
								<div>
									<label for="duplicate_start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date & Time</label>
									<input type="datetime-local" id="duplicate_start_date" name="start_date" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
								</div>
								<div>
									<label for="duplicate_end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date & Time</label>
									<input type="datetime-local" id="duplicate_end_date" name="end_date" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"/>
								</div>
							</div>
						</div>
						<div class="px-6 py-4 bg-gray-50 flex justify-end space-x-3">
							<button type="button" onclick="hideDuplicateModal()" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Cancel
							</button>
							<button type="submit" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
								Duplicate Event
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>

		<script>
			function showDuplicateModal() {
				document.getElementById('duplicateModal').classList.remove('hidden');
			}
			
			function hideDuplicateModal() {
				document.getElementById('duplicateModal').classList.add('hidden');
			}
		</script>
	}
}

// EventForm renders the common event form fields
templ EventForm(categories []*models.Category, formData map[string]interface{}, errors map[string]string, isEdit bool) {
	<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
		<!-- Title -->
		<div class="lg:col-span-2">
			<label for="title" class="block text-sm font-medium text-gray-700 mb-2">Event Title *</label>
			<input 
				type="text" 
				id="title" 
				name="title" 
				value={ getStringValue(formData, "title") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["title"] != "") }
				placeholder="Enter your event title"
			/>
			if errors != nil && errors["title"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["title"] }</p>
			}
		</div>

		<!-- Category -->
		<div>
			<label for="category_id" class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
			<select 
				id="category_id" 
				name="category_id" 
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["category_id"] != "") }
			>
				<option value="">Select a category</option>
				for _, category := range categories {
					<option value={ strconv.Itoa(category.ID) } if getStringValue(formData, "category_id") == strconv.Itoa(category.ID) { selected }>
						{ category.Name }
					</option>
				}
			</select>
			if errors != nil && errors["category_id"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["category_id"] }</p>
			}
		</div>

		<!-- Location -->
		<div>
			<label for="location" class="block text-sm font-medium text-gray-700 mb-2">Location *</label>
			<input 
				type="text" 
				id="location" 
				name="location" 
				value={ getStringValue(formData, "location") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["location"] != "") }
				placeholder="Event location"
			/>
			if errors != nil && errors["location"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["location"] }</p>
			}
		</div>

		<!-- Start Date -->
		<div>
			<label for="start_date" class="block text-sm font-medium text-gray-700 mb-2">Start Date & Time *</label>
			<input 
				type="datetime-local" 
				id="start_date" 
				name="start_date" 
				value={ getStringValue(formData, "start_date") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["start_date"] != "") }
			/>
			if errors != nil && errors["start_date"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["start_date"] }</p>
			}
		</div>

		<!-- End Date -->
		<div>
			<label for="end_date" class="block text-sm font-medium text-gray-700 mb-2">End Date & Time *</label>
			<input 
				type="datetime-local" 
				id="end_date" 
				name="end_date" 
				value={ getStringValue(formData, "end_date") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["end_date"] != "") }
			/>
			if errors != nil && errors["end_date"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["end_date"] }</p>
			}
		</div>

		<!-- Description -->
		<div class="lg:col-span-2">
			<label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description *</label>
			<textarea 
				id="description" 
				name="description" 
				rows="6" 
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["description"] != "") }
				placeholder="Describe your event in detail..."
			>{ getStringValue(formData, "description") }</textarea>
			if errors != nil && errors["description"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["description"] }</p>
			}
		</div>

		<!-- Event Type -->
		<div>
			<label for="event_type" class="block text-sm font-medium text-gray-700 mb-2">Event Type</label>
			<select 
				id="event_type" 
				name="event_type" 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["event_type"] != "") }
			>
				<option value="">Select event type</option>
				<option value="conference" if getStringValue(formData, "event_type") == "conference" { selected }>Conference</option>
				<option value="workshop" if getStringValue(formData, "event_type") == "workshop" { selected }>Workshop</option>
				<option value="seminar" if getStringValue(formData, "event_type") == "seminar" { selected }>Seminar</option>
				<option value="concert" if getStringValue(formData, "event_type") == "concert" { selected }>Concert</option>
				<option value="festival" if getStringValue(formData, "event_type") == "festival" { selected }>Festival</option>
				<option value="networking" if getStringValue(formData, "event_type") == "networking" { selected }>Networking</option>
				<option value="sports" if getStringValue(formData, "event_type") == "sports" { selected }>Sports</option>
				<option value="exhibition" if getStringValue(formData, "event_type") == "exhibition" { selected }>Exhibition</option>
				<option value="other" if getStringValue(formData, "event_type") == "other" { selected }>Other</option>
			</select>
			if errors != nil && errors["event_type"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["event_type"] }</p>
			}
		</div>

		<!-- Max Capacity -->
		<div>
			<label for="max_capacity" class="block text-sm font-medium text-gray-700 mb-2">Maximum Capacity</label>
			<input 
				type="number" 
				id="max_capacity" 
				name="max_capacity" 
				value={ getStringValue(formData, "max_capacity") }
				min="1"
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["max_capacity"] != "") }
				placeholder="e.g. 100"
			/>
			<p class="mt-1 text-xs text-gray-500">Leave empty for unlimited capacity</p>
			if errors != nil && errors["max_capacity"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["max_capacity"] }</p>
			}
		</div>

		<!-- Basic Ticket Information -->
		<div class="lg:col-span-2">
			<div class="bg-gray-50 rounded-lg p-6 border border-gray-200">
				<h3 class="text-lg font-medium text-gray-900 mb-4">Basic Ticket Information</h3>
				<p class="text-sm text-gray-600 mb-4">Set up basic ticket pricing. You can add more ticket types and configure advanced options after creating the event.</p>
				
				<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
					<!-- Ticket Name -->
					<div>
						<label for="ticket_name" class="block text-sm font-medium text-gray-700 mb-2">Ticket Name</label>
						<input 
							type="text" 
							id="ticket_name" 
							name="ticket_name" 
							value={ getStringValue(formData, "ticket_name") }
							class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["ticket_name"] != "") }
							placeholder="e.g. General Admission"
						/>
						if errors != nil && errors["ticket_name"] != "" {
							<p class="mt-1 text-sm text-red-600">{ errors["ticket_name"] }</p>
						}
					</div>

					<!-- Ticket Price -->
					<div>
						<label for="ticket_price" class="block text-sm font-medium text-gray-700 mb-2">Price (KES)</label>
						<input 
							type="number" 
							id="ticket_price" 
							name="ticket_price" 
							value={ getStringValue(formData, "ticket_price") }
							min="0"
							step="0.01"
							class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["ticket_price"] != "") }
							placeholder="0.00"
						/>
						<p class="mt-1 text-xs text-gray-500">Enter 0 for free events</p>
						if errors != nil && errors["ticket_price"] != "" {
							<p class="mt-1 text-sm text-red-600">{ errors["ticket_price"] }</p>
						}
					</div>

					<!-- Ticket Quantity -->
					<div>
						<label for="ticket_quantity" class="block text-sm font-medium text-gray-700 mb-2">Available Tickets</label>
						<input 
							type="number" 
							id="ticket_quantity" 
							name="ticket_quantity" 
							value={ getStringValue(formData, "ticket_quantity") }
							min="1"
							class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["ticket_quantity"] != "") }
							placeholder="e.g. 100"
						/>
						if errors != nil && errors["ticket_quantity"] != "" {
							<p class="mt-1 text-sm text-red-600">{ errors["ticket_quantity"] }</p>
						}
					</div>

					<!-- Sale End Date -->
					<div>
						<label for="sale_end_date" class="block text-sm font-medium text-gray-700 mb-2">Sales End Date</label>
						<input 
							type="datetime-local" 
							id="sale_end_date" 
							name="sale_end_date" 
							value={ getStringValue(formData, "sale_end_date") }
							class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["sale_end_date"] != "") }
						/>
						<p class="mt-1 text-xs text-gray-500">Leave empty to sell until event starts</p>
						if errors != nil && errors["sale_end_date"] != "" {
							<p class="mt-1 text-sm text-red-600">{ errors["sale_end_date"] }</p>
						}
					</div>
				</div>
			</div>
		</div>

		<!-- Image Upload -->
		<div class="lg:col-span-2">
			<label for="image" class="block text-sm font-medium text-gray-700 mb-2">Event Image</label>
			<div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-lg hover:border-gray-400 transition-colors">
				<div class="space-y-1 text-center">
					<svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
						<path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
					</svg>
					<div class="flex text-sm text-gray-600">
						<label for="image" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
							<span>Upload an image</span>
							<input id="image" name="image" type="file" accept="image/*" class="sr-only"/>
						</label>
						<p class="pl-1">or drag and drop</p>
					</div>
					<p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
				</div>
			</div>
			if errors != nil && errors["image"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["image"] }</p>
			}
		</div>
	</div>
}