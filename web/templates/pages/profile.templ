package pages

import "event-ticketing-platform/internal/models"
import "event-ticketing-platform/web/templates/layouts"

templ ProfilePage(user *models.User, errors map[string][]string, formData map[string]string, success bool) {
	@layouts.BaseLayout("Profile Settings", user) {
		<div class="min-h-screen bg-gray-50">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Profile Settings</h1>
							<p class="text-gray-600 mt-2">Update your personal information and account details</p>
						</div>
						<a href="/dashboard" class="text-primary-600 hover:text-primary-500 font-medium">
							‚Üê Back to Dashboard
						</a>
					</div>
				</div>

				<!-- Navigation Tabs -->
				<div class="mb-8">
					<nav class="flex space-x-8">
						<a href="/dashboard/profile" class="border-b-2 border-primary-500 text-primary-600 py-2 px-1 text-sm font-medium">
							Profile
						</a>
						<a href="/dashboard/security" class="border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium">
							Security
						</a>
						<a href="/dashboard/settings" class="border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 py-2 px-1 text-sm font-medium">
							Settings
						</a>
					</nav>
				</div>

				<!-- Success Message -->
				if success {
					<div class="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
						<div class="flex">
							<svg class="h-5 w-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
							</svg>
							<div class="ml-3">
								<p class="text-sm font-medium text-green-800">
									Profile updated successfully!
								</p>
							</div>
						</div>
					</div>
				}

				<!-- Profile Form -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<div class="px-6 py-4 border-b border-gray-200">
						<h2 class="text-lg font-medium text-gray-900">Personal Information</h2>
						<p class="text-sm text-gray-500 mt-1">Update your personal details and contact information.</p>
					</div>
					
					<form hx-post="/dashboard/profile" hx-target="body" hx-swap="outerHTML" class="p-6">
						<!-- General Errors -->
						if generalErrors, hasGeneral := errors["general"]; hasGeneral {
							<div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
								<div class="flex">
									<svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									<div class="ml-3">
										for _, err := range generalErrors {
											<p class="text-sm font-medium text-red-800">{ err }</p>
										}
									</div>
								</div>
							</div>
						}

						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							<!-- First Name -->
							<div>
								<label for="first_name" class="block text-sm font-medium text-gray-700 mb-2">
									First Name
								</label>
								<input
									type="text"
									id="first_name"
									name="first_name"
									value={ getFormValue(formData, "first_name", user.FirstName) }
									class={ "w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent",
										templ.KV("border-red-300 bg-red-50", len(errors["first_name"]) > 0),
										templ.KV("border-gray-300", len(errors["first_name"]) == 0) }
									required
								/>
								if fieldErrors, hasErrors := errors["first_name"]; hasErrors {
									<div class="mt-1">
										for _, err := range fieldErrors {
											<p class="text-sm text-red-600">{ err }</p>
										}
									</div>
								}
							</div>

							<!-- Last Name -->
							<div>
								<label for="last_name" class="block text-sm font-medium text-gray-700 mb-2">
									Last Name
								</label>
								<input
									type="text"
									id="last_name"
									name="last_name"
									value={ getFormValue(formData, "last_name", user.LastName) }
									class={ "w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent",
										templ.KV("border-red-300 bg-red-50", len(errors["last_name"]) > 0),
										templ.KV("border-gray-300", len(errors["last_name"]) == 0) }
									required
								/>
								if fieldErrors, hasErrors := errors["last_name"]; hasErrors {
									<div class="mt-1">
										for _, err := range fieldErrors {
											<p class="text-sm text-red-600">{ err }</p>
										}
									</div>
								}
							</div>
						</div>

						<!-- Email -->
						<div class="mt-6">
							<label for="email" class="block text-sm font-medium text-gray-700 mb-2">
								Email Address
							</label>
							<input
								type="email"
								id="email"
								name="email"
								value={ getFormValue(formData, "email", user.Email) }
								class={ "w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent",
									templ.KV("border-red-300 bg-red-50", len(errors["email"]) > 0),
									templ.KV("border-gray-300", len(errors["email"]) == 0) }
								required
							/>
							if fieldErrors, hasErrors := errors["email"]; hasErrors {
								<div class="mt-1">
									for _, err := range fieldErrors {
										<p class="text-sm text-red-600">{ err }</p>
									}
								</div>
							}
							<p class="mt-1 text-sm text-gray-500">
								Changing your email address may require verification.
							</p>
						</div>

						<!-- Account Information (Read-only) -->
						<div class="mt-8 pt-6 border-t border-gray-200">
							<h3 class="text-lg font-medium text-gray-900 mb-4">Account Information</h3>
							<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
								<div>
									<label class="block text-sm font-medium text-gray-500">Account Type</label>
									<p class="mt-1 text-sm text-gray-900 capitalize">{ string(user.Role) }</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500">Member Since</label>
									<p class="mt-1 text-sm text-gray-900">{ user.CreatedAt.Format("January 2, 2006") }</p>
								</div>
								<div>
									<label class="block text-sm font-medium text-gray-500">Email Verified</label>
									<p class="mt-1 text-sm text-gray-900">
										if user.EmailVerified {
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
												<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
												</svg>
												Verified
											</span>
										} else {
											<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
												<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
													<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
												</svg>
												Pending
											</span>
										}
									</p>
								</div>
							</div>
						</div>

						<!-- Submit Button -->
						<div class="mt-8 flex justify-end space-x-3">
							<a href="/dashboard" class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors">
								Cancel
							</a>
							<button
								type="submit"
								class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg text-sm font-medium transition-colors"
							>
								Save Changes
							</button>
						</div>
					</form>
				</div>

				<!-- Danger Zone -->
				<div class="mt-8 bg-white rounded-lg shadow-sm border border-red-200">
					<div class="px-6 py-4 border-b border-red-200">
						<h2 class="text-lg font-medium text-red-900">Danger Zone</h2>
						<p class="text-sm text-red-600 mt-1">Irreversible and destructive actions.</p>
					</div>
					<div class="p-6">
						<div class="flex items-center justify-between">
							<div>
								<h3 class="text-sm font-medium text-gray-900">Delete Account</h3>
								<p class="text-sm text-gray-500 mt-1">
									Permanently delete your account and all associated data. This action cannot be undone.
								</p>
							</div>
							<a href="/dashboard/delete-account" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm font-medium transition-colors">
								Delete Account
							</a>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

