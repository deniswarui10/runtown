package pages

import (
	"fmt"
	"strconv"
	"event-ticketing-platform/internal/models"
	"event-ticketing-platform/web/templates/layouts"
)

// TicketTypesPage renders the ticket types management page for an event
templ TicketTypesPage(user *models.User, event *models.Event, ticketTypes []*models.TicketType) {
	@layouts.BaseLayout(fmt.Sprintf("Ticket Types - %s", event.Title), user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<a href="/organizer/events" class="text-gray-400 hover:text-gray-600 mr-4">
								<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
								</svg>
							</a>
							<div>
								<h1 class="text-3xl font-bold text-gray-900">Ticket Types</h1>
								<p class="mt-2 text-gray-600">{ event.Title }</p>
							</div>
						</div>
						<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/tickets/create", event.ID)) } class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
							Add Ticket Type
						</a>
					</div>
				</div>

				<!-- Success Message -->
				if r := ctx.Value("request"); r != nil {
					<!-- Success message would be handled by the handler -->
				}

				<!-- Ticket Types List -->
				<div id="ticket-types-list">
					@TicketTypesListPartial(ticketTypes)
				</div>
			</div>
		</div>
	}
}

// TicketTypesListPartial renders just the ticket types list for HTMX updates
templ TicketTypesListPartial(ticketTypes []*models.TicketType) {
	if len(ticketTypes) == 0 {
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
			<div class="text-gray-400 mb-4">
				<svg class="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"/>
				</svg>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-2">No ticket types found</h3>
			<p class="text-gray-600 mb-6">Create your first ticket type to start selling tickets.</p>
			<a href="tickets/create" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
				Create First Ticket Type
			</a>
		</div>
	} else {
		<div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
			<div class="overflow-x-auto">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ticket Type</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sale Period</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, ticketType := range ticketTypes {
							<tr class="hover:bg-gray-50" id={ fmt.Sprintf("ticket-type-row-%d", ticketType.ID) }>
								<td class="px-6 py-4">
									<div>
										<div class="text-sm font-medium text-gray-900">{ ticketType.Name }</div>
										if ticketType.Description != "" {
											<div class="text-sm text-gray-500">{ ticketType.Description }</div>
										}
									</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm text-gray-900">KSh { fmt.Sprintf("%.2f", ticketType.PriceInCurrency()) }</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm text-gray-900">{ strconv.Itoa(ticketType.Sold) } / { strconv.Itoa(ticketType.Quantity) }</div>
									<div class="text-sm text-gray-500">{ strconv.Itoa(ticketType.Available()) } available</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm text-gray-900">{ ticketType.SaleStart.Format("Jan 2, 2006") }</div>
									<div class="text-sm text-gray-500">to { ticketType.SaleEnd.Format("Jan 2, 2006") }</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									@TicketTypeStatusBadge(ticketType)
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
									<div class="flex items-center space-x-2">
										<a href={ templ.URL(fmt.Sprintf("tickets/%d/edit", ticketType.ID)) } class="text-blue-600 hover:text-blue-900">Edit</a>
										if ticketType.Sold == 0 {
											<button 
												class="text-red-600 hover:text-red-900"
												hx-delete={ fmt.Sprintf("tickets/%d", ticketType.ID) }
												hx-target={ fmt.Sprintf("#ticket-type-row-%d", ticketType.ID) }
												hx-swap="outerHTML"
												hx-confirm="Are you sure you want to delete this ticket type? This action cannot be undone."
											>
												Delete
											</button>
										}
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

// TicketTypeStatusBadge renders a status badge for a ticket type
templ TicketTypeStatusBadge(ticketType *models.TicketType) {
	if ticketType.IsSoldOut() {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
			Sold Out
		</span>
	} else if ticketType.SaleNotStarted() {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
			Not Started
		</span>
	} else if ticketType.SaleEnded() {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
			Sale Ended
		</span>
	} else if ticketType.IsOnSale() {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
			On Sale
		</span>
	} else {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
			Unknown
		</span>
	}
}

// CreateTicketTypePage renders the ticket type creation form
templ CreateTicketTypePage(user *models.User, event *models.Event, formData map[string]interface{}, errors map[string]string) {
	@layouts.BaseLayout(fmt.Sprintf("Create Ticket Type - %s", event.Title), user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center">
						<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/tickets", event.ID)) } class="text-gray-400 hover:text-gray-600 mr-4">
							<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
							</svg>
						</a>
						<div>
							<h1 class="text-3xl font-bold text-gray-900">Create Ticket Type</h1>
							<p class="mt-2 text-gray-600">{ event.Title }</p>
						</div>
					</div>
				</div>

				<!-- Form -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<form method="POST" class="p-6 space-y-6">
						<!-- General Error -->
						if errors != nil && errors["general"] != "" {
							<div class="bg-red-50 border border-red-200 rounded-lg p-4">
								<div class="flex">
									<svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
									</svg>
									<div class="ml-3">
										<p class="text-sm text-red-800">{ errors["general"] }</p>
									</div>
								</div>
							</div>
						}

						@TicketTypeForm(formData, errors, false)

						<!-- Submit Buttons -->
						<div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
							<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/tickets", event.ID)) } class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Cancel
							</a>
							<button type="submit" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
								Create Ticket Type
							</button>
						</div>
					</form>
				</div>
			</div>
		</div>
	}
}

// EditTicketTypePage renders the ticket type editing form
templ EditTicketTypePage(user *models.User, event *models.Event, ticketType *models.TicketType, formData map[string]interface{}, errors map[string]string) {
	@layouts.BaseLayout(fmt.Sprintf("Edit %s - %s", ticketType.Name, event.Title), user) {
		<div class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Header -->
				<div class="mb-8">
					<div class="flex items-center justify-between">
						<div class="flex items-center">
							<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/tickets", event.ID)) } class="text-gray-400 hover:text-gray-600 mr-4">
								<svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
								</svg>
							</a>
							<div>
								<h1 class="text-3xl font-bold text-gray-900">Edit Ticket Type</h1>
								<p class="mt-2 text-gray-600">{ event.Title }</p>
							</div>
						</div>
						<div class="flex items-center space-x-4">
							@TicketTypeStatusBadge(ticketType)
						</div>
					</div>
				</div>

				<!-- Form -->
				<div class="bg-white rounded-lg shadow-sm border border-gray-200">
					<form method="POST" class="p-6 space-y-6">
						<!-- General Error -->
						if errors != nil && errors["general"] != "" {
							<div class="bg-red-50 border border-red-200 rounded-lg p-4">
								<div class="flex">
									<svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
									</svg>
									<div class="ml-3">
										<p class="text-sm text-red-800">{ errors["general"] }</p>
									</div>
								</div>
							</div>
						}

						@TicketTypeForm(getFormDataFromTicketType(ticketType, formData), errors, true)

						<!-- Submit Buttons -->
						<div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
							<a href={ templ.URL(fmt.Sprintf("/organizer/events/%d/tickets", event.ID)) } class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 font-medium transition-colors">
								Cancel
							</a>
							<button type="submit" class="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
								Save Changes
							</button>
						</div>
					</form>
				</div>

				<!-- Sales Information -->
				<div class="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
					<h3 class="text-lg font-medium text-gray-900 mb-4">Sales Information</h3>
					<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
						<div>
							<div class="text-2xl font-bold text-gray-900">{ strconv.Itoa(ticketType.Sold) }</div>
							<div class="text-sm text-gray-500">Tickets Sold</div>
						</div>
						<div>
							<div class="text-2xl font-bold text-gray-900">{ strconv.Itoa(ticketType.Available()) }</div>
							<div class="text-sm text-gray-500">Available</div>
						</div>
						<div>
							<div class="text-2xl font-bold text-gray-900">KSh { fmt.Sprintf("%.2f", float64(ticketType.Sold * ticketType.Price) / 100.0) }</div>
							<div class="text-sm text-gray-500">Total Revenue</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

// TicketTypeForm renders the common ticket type form fields
templ TicketTypeForm(formData map[string]interface{}, errors map[string]string, isEdit bool) {
	<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
		<!-- Name -->
		<div class="lg:col-span-2">
			<label for="name" class="block text-sm font-medium text-gray-700 mb-2">Ticket Type Name *</label>
			<input 
				type="text" 
				id="name" 
				name="name" 
				value={ getStringValue(formData, "name") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["name"] != "") }
				placeholder="e.g., General Admission, VIP, Early Bird"
			/>
			if errors != nil && errors["name"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["name"] }</p>
			}
		</div>

		<!-- Price -->
		<div>
			<label for="price" class="block text-sm font-medium text-gray-700 mb-2">Price (KES) *</label>
			<div class="relative">
				<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
					<span class="text-gray-500 sm:text-sm">KSh</span>
				</div>
				<input 
					type="number" 
					id="price" 
					name="price" 
					value={ getStringValue(formData, "price") }
					step="0.01"
					min="0"
					required 
					class={ "w-full pl-8 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["price"] != "") }
					placeholder="0.00"
				/>
			</div>
			if errors != nil && errors["price"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["price"] }</p>
			}
		</div>

		<!-- Quantity -->
		<div>
			<label for="quantity" class="block text-sm font-medium text-gray-700 mb-2">Quantity *</label>
			<input 
				type="number" 
				id="quantity" 
				name="quantity" 
				value={ getStringValue(formData, "quantity") }
				min="1"
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["quantity"] != "") }
				placeholder="Number of tickets available"
			/>
			if errors != nil && errors["quantity"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["quantity"] }</p>
			}
		</div>

		<!-- Sale Start -->
		<div>
			<label for="sale_start" class="block text-sm font-medium text-gray-700 mb-2">Sale Start Date & Time *</label>
			<input 
				type="datetime-local" 
				id="sale_start" 
				name="sale_start" 
				value={ getStringValue(formData, "sale_start") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["sale_start"] != "") }
			/>
			if errors != nil && errors["sale_start"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["sale_start"] }</p>
			}
		</div>

		<!-- Sale End -->
		<div>
			<label for="sale_end" class="block text-sm font-medium text-gray-700 mb-2">Sale End Date & Time *</label>
			<input 
				type="datetime-local" 
				id="sale_end" 
				name="sale_end" 
				value={ getStringValue(formData, "sale_end") }
				required 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["sale_end"] != "") }
			/>
			if errors != nil && errors["sale_end"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["sale_end"] }</p>
			}
		</div>

		<!-- Description -->
		<div class="lg:col-span-2">
			<label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
			<textarea 
				id="description" 
				name="description" 
				rows="4" 
				class={ "w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", templ.KV("border-red-300", errors != nil && errors["description"] != "") }
				placeholder="Optional description of what's included with this ticket type..."
			>{ getStringValue(formData, "description") }</textarea>
			if errors != nil && errors["description"] != "" {
				<p class="mt-1 text-sm text-red-600">{ errors["description"] }</p>
			}
		</div>
	</div>
}